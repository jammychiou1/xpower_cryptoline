def format_imm(val):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += '@sint16'
    return s

def format_const(val):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += '@16'
    return s

def format_arr(arr):
    inner = ', '.join(arr)
    return f'[{inner}]'

def format_coefs(coefs):
    return format_arr([str(c) for c in coefs])

def format_poly(base, cnt, suff=''):
    arr = '['
    for i in range(cnt):
        if i != cnt - 1:
            s = f'poly{base + i}{suff},'
            s = f'{s:9}'
        else:
            s = f'poly{base + i}{suff}'
            s = f'{s:7}'
        arr += s
    arr += ']'
    return arr

def format_movconsts(base, cnt):
    arr = '['
    for i in range(cnt):
        if i != cnt - 1:
            s = f'const{base + i},'
            s = f'{s:9}'
        else:
            s = f'const{base + i}'
            s = f'{s:7}'
        arr += s
    arr += ']'
    return arr

def memory_loc(addr):
    return f'L{hex(addr)}'

def memory_arr(base, len, size):
    return format_arr([memory_loc(base + size * i) for i in range(len)])

const_table = [
      4591,     29,      7,      0,      0,      0,      0,      0,
      1005,    918,   -818,  -1736,   7173,   6552,  -5838, -12391,
     -2274, -16231,   1610,  11491,  -2113, -15081,  -1815, -12954,
     -2274, -16231,   1610,  11491,  -2113, -15081,  -1815, -12954,
      2113,  15081,  -2274, -16231,   1815,  12954,   1610,  11491,
     -2113, -15081,   2274,  16231,  -1815, -12954,  -1610, -11491,
         1,      7,      1,      7,      1,      7,      1,      7,
         1,      7,      1,      7,      1,      7,      1,      7,
     -1610, -11491,  -1815, -12954,   2274,  16231,  -2113, -15081,
      1610,  11491,   1815,  12954,  -2274, -16231,   2113,  15081,
     -1815, -12954,  -2113, -15081,   1610,  11491,  -2274, -16231,
     -1815, -12954,  -2113, -15081,   1610,  11491,  -2274, -16231,
      2274,  16231,   1610,  11491,   2113,  15081,  -1815, -12954,
     -2274, -16231,  -1610, -11491,  -2113, -15081,   1815,  12954,
     -2113, -15081,  -2274, -16231,  -1815, -12954,   1610,  11491,
     -2113, -15081,  -2274, -16231,  -1815, -12954,   1610,  11491,
        -1,     -7,      1,      7,     -1,     -7,      1,      7,
         1,      7,     -1,     -7,      1,      7,     -1,     -7,
      1610,  11491,  -1815, -12954,  -2274, -16231,  -2113, -15081,
      1610,  11491,  -1815, -12954,  -2274, -16231,  -2113, -15081,
      4591,  29235,      0,      0,      0,      0,      0,      0,
      -621,   1891,   -803,      0,  -4432,  13497,  -5731, -17729,
      4591,      0,      0,      0,      0,      0,      0,      0,
    -28264, -16381, -28264, -16381,  -2295,  -2295,      7,      1,
    -28264, -16381,    557,  12983,  -2295,   1819,  12241,   1715,
    -28264, -16381,  -6267,  13496,  -2295,   1891, -11463,  -1606,
    -28264, -16381,   8365,  15274,  -2295,   2140,   2213,    310,
    -28264, -16381,  23468,  -7252,  -2295,  -1016,  -6467,   -906,
    -28264, -16381, -17144,  -3234,  -2295,   -453, -14503,  -2032,
    -28264, -16381,  19899,   1106,  -2295,    155,  -2220,   -311,
    -28264, -16381, -24025,  -5732,  -2295,   -803,  -5774,   -809,
    -28264, -16381,  23411, -10264,  -2295,  -1438,  -6802,   -953,
      9007,      7,      0,      0,      0,      0, -11491,  -1610,
      9007,      7,      0,      0,      0,      0,   6616,    927,
      9007,      7,      0,      0,      0,      0,  -9122,  -1278,
      9007,      7,      0,      0,      0,      0,   2077,    291,
      9007,      7,      0,      0,      0,      0,   6681,    936,
      9007,      7,      0,      0,      0,      0, -13982,  -1959,
      9007,      7,      0,      0,      0,      0,   9414,   1319,
      9007,      7,      0,      0,      0,      0, -13297,  -1863,
      9007,      7,      0,      0,      0,      0,  -9664,  -1354,
    -28264, -16381,  19114,   8843,  -2295,   1239,  11491,   1610,
    -28264, -16381,   3297,  -6281,  -2295,   -880,  13982,   1959,
    -28264, -16381,   3212, -10799,  -2295,  -1513,  -6616,   -927,
    -28264, -16381,  19300,   2248,  -2295,    315,  -9414,  -1319,
    -28264, -16381,  23054, -12705,  -2295,  -1780,   9122,   1278,
    -28264, -16381, -15845,  16137,  -2295,   2261,  13297,   1863,
    -28264, -16381,  27122, -11092,  -2295,  -1554,  -2077,   -291,
    -28264, -16381, -26351, -13783,  -2295,  -1931,   9664,   1354,
    -28264, -16381,  12633,  -5339,  -2295,   -748,  -6681,   -936,
      9007,      7,      0,      0,      0,      0,  16231,   2274,
      9007,      7,      0,      0,      0,      0, -15695,  -2199,
      9007,      7,      0,      0,      0,      0,   7958,   1115,
      9007,      7,      0,      0,      0,      0,  -1427,   -200,
      9007,      7,      0,      0,      0,      0,  -1213,   -170,
      9007,      7,      0,      0,      0,      0,  15353,   2151,
      9007,      7,      0,      0,      0,      0, -14803,  -2074,
      9007,      7,      0,      0,      0,      0, -15859,  -2222,
      9007,      7,      0,      0,      0,      0,   9457,   1325,
    -28264, -16381, -17858,  -8116,  -2295,  -1137, -12954,  -1815,
    -28264, -16381, -20799,    606,  -2295,     85,   -193,    -27,
    -28264, -16381,  29106,  11655,  -2295,   1633,  -2819,   -395,
    -28264, -16381, -16759,    713,  -2295,    100,  14582,   2043,
    -28264, -16381, -19728,   7929,  -2295,   1111,   5796,    812,
    -28264, -16381,  -8151,  12404,  -2295,   1738,  10756,   1507,
    -28264, -16381, -30919,   7401,  -2295,   1037,  -1627,   -228,
    -28264, -16381, -25010,  -8537,  -2295,  -1196,  -5603,   -785,
    -28264, -16381, -20956,   8707,  -2295,   1220,  -7937,  -1112,
      9007,      7,      0,      0,      0,      0,     -7,     -1,
      9007,      7,      0,      0,      0,      0,  11463,   1606,
      9007,      7,      0,      0,      0,      0,   6467,    906,
      9007,      7,      0,      0,      0,      0,   2220,    311,
      9007,      7,      0,      0,      0,      0,   6802,    953,
      9007,      7,      0,      0,      0,      0, -12241,  -1715,
      9007,      7,      0,      0,      0,      0,  -2213,   -310,
      9007,      7,      0,      0,      0,      0,  14503,   2032,
      9007,      7,      0,      0,      0,      0,   5774,    809,
    -28264, -16381, -15031,   9906,  -2295,   1388, -16231,  -2274,
    -28264, -16381, -27408,  -3969,  -2295,   -556, -15353,  -2151,
    -28264, -16381, -29249,  13582,  -2295,   1903,  15695,   2199,
    -28264, -16381,  21726,   -814,  -2295,   -114,  14803,   2074,
    -28264, -16381,   4140, -11006,  -2295,  -1542,  -7958,  -1115,
    -28264, -16381, -12990,   2897,  -2295,    406,  15859,   2222,
    -28264, -16381,  -6695,  -9094,  -2295,  -1274,   1427,    200,
    -28264, -16381,  23268,  14974,  -2295,   2098,  -9457,  -1325,
    -28264, -16381, -23297,  16287,  -2295,   2282,   1213,    170,
      9007,      7,      0,      0,      0,      0,  12954,   1815,
      9007,      7,      0,      0,      0,      0,   2819,    395,
      9007,      7,      0,      0,      0,      0,  -5796,   -812,
      9007,      7,      0,      0,      0,      0,   1627,    228,
      9007,      7,      0,      0,      0,      0,   7937,   1112,
      9007,      7,      0,      0,      0,      0,    193,     27,
      9007,      7,      0,      0,      0,      0, -14582,  -2043,
      9007,      7,      0,      0,      0,      0, -10756,  -1507,
      9007,      7,      0,      0,      0,      0,   5603,    785,
    -28264, -16381, -23496,   5745,  -2295,    805, -15081,  -2113,
    -28264, -16381, -21184,  -3341,  -2295,   -468, -10678,  -1496,
    -28264, -16381,   3198,   4832,  -2295,    677,   5203,    729,
    -28264, -16381, -32632,  15345,  -2295,   2150,  10585,   1483,
    -28264, -16381, -30934,  -9736,  -2295,  -1364,   -492,    -69,
    -28264, -16381, -11406,   4560,  -2295,    639,   7359,   1031,
    -28264, -16381,  -9407,  11676,  -2295,   1636,   4497,    630,
    -28264, -16381, -13418,  13075,  -2295,   1832,  11170,   1565,
    -28264, -16381,   8208,  -9393,  -2295,  -1316, -12562,  -1760,
      9007,      7,      0,      0,      0,      0,  15081,   2113,
      9007,      7,      0,      0,      0,      0,  -5203,   -729,
      9007,      7,      0,      0,      0,      0,    492,     69,
      9007,      7,      0,      0,      0,      0,  -4497,   -630,
      9007,      7,      0,      0,      0,      0,  12562,   1760,
      9007,      7,      0,      0,      0,      0,  10678,   1496,
      9007,      7,      0,      0,      0,      0, -10585,  -1483,
      9007,      7,      0,      0,      0,      0,  -7359,  -1031,
      9007,      7,      0,      0,      0,      0, -11170,  -1565,
         1,      7,   -478,  -3412,   -478,  -3412,   4591,  15631,
     -1610, -11491,   1175,   8386,      0,      0,   4591,  15631,
      1610,  11491,   -129,   -921,   1708,  12191,   4591,  15631,
      2274,  16231,   2190,  15631,      0,      0,   4591,  15631,
     -1815, -12954,     -6,    -43,   -129,   -921,   4591,  15631,
        -1,     -7,    956,   6823,      0,      0,   4591,  15631,
     -2274, -16231,   1708,  12191,  -1095,  -7815,   4591,  15631,
      1815,  12954,    258,   1841,      0,      0,   4591,  15631,
     -2113, -15081,  -1095,  -7815,     -6,    -43,   4591,  15631,
      2113,  15081,     12,     86,      0,      0,   4591,  15631,
      4591,      7,      0,      0,      0,      0,      0,      0,
       -27,   -193,      0,      0,      0,      0,      0,      0,
      4591,   4591,   4591,   4591,   4591,   4591,   4591,   4591,
      2295,   2295,   2295,   2295,   2295,   2295,   2295,   2295,
     -2295,  -2295,  -2295,  -2295,  -2295,  -2295,  -2295,  -2295,
]

def annot(lines, consts, poly_base, arr_base):
    print('proc main(')
    print('    # input')
    for i in range(0, 768, 16):
        arr = [f'sint16 poly{i + j},' for j in range(16)]
        arr = [f'{s:17}' for s in arr]
        print(f'    {" ".join(arr).strip()}')
    print()
    print('    # ghost')
    print('    sint16 Q;')
    print()
    print('    # output')
    for i in range(10):
        for k0 in range(2):
            for j in range(9):
                arr = [f'sint16 arr{i}{k0}{j}{k},' for k in range(8)]
                print(f'    {" ".join(arr)}')
    print('    sint16 void')
    print(') =')
    print('{ true && true }')

    print()
    print('# inputs')
    print()

    for i in range(0, 768, 16):
        print(f'mov {memory_arr(poly_base + 2 * i, 16, 2)} {format_poly(i, 16, "")};')
    print()
    for i in range(0, 1024, 16):
        rhs = [format_imm(c) for c in const_table[i : i + 16]]
        print(f'mov {memory_arr(consts + 2 * i, 16, 2)} {format_arr(rhs)};')
    print()

    print(''.join(lines))

    for i in range(10):
        for k0 in range(2):
            for j in range(9):
                arr = [f'arr{i}{k0}{j}{k}' for k in range(8)]
                print(f'mov {format_arr(arr)} {memory_arr(arr_base + 16 * (j + 9 * (k0 + 2 * i)), 8, 2)};')
    print(f'mov void 0@sint16;')

    print('{ true && true }')

# with open('./main_lay1__fwd_extract__O1dbg_neon_raw.cl', 'r') as f:
#     lines = f.readlines()
#     annot(lines, 0x55555526f0, 0x5555570c38, 0x7fffffda30)

with open('./main_lay1__fwd_extract__O3_neon_raw.cl', 'r') as f:
    lines = f.readlines()
    annot(lines, 0x5555552b30, 0x5555570c40, 0x7fffffc3c0)
