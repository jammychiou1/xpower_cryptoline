def find_first_line(lines, pattern, begin=0):
    for now in range(begin, len(lines)):
        if lines[now].find(pattern) != -1:
            return now
    return -1

def format_imm(val):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += '@sint16'
    return s

def format_const(val):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += '@16'
    return s

def format_arr(arr):
    inner = ', '.join(arr)
    return f'[{inner}]'

def format_coefs(coefs):
    return format_arr([str(c) for c in coefs])

def format_poly(base, cnt):
    arr = '['
    for i in range(cnt):
        if i != cnt - 1:
            s = f'poly{base + i},'
            s = f'{s:9}'
        else:
            s = f'poly{base + i}'
            s = f'{s:7}'
        arr += s
    arr += ']'
    return arr

def memory_loc(addr):
    return f'L{hex(addr)}'

def memory_arr(base, len, size):
    return format_arr([memory_loc(base + size * i) for i in range(len)])

cut_id = 0
assert_id = 0

def annot_ntt5_4x_nof14(ntt5_4x_nof14, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(ntt5_4x_nof14, 'PC = 0x555555097c')
    seg1_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550994', seg0_end)
    seg2_end = find_first_line(ntt5_4x_nof14, 'PC = 0x55555509a0', seg1_end)
    seg3_end = find_first_line(ntt5_4x_nof14, 'PC = 0x55555509b8', seg2_end)
    seg4_end = find_first_line(ntt5_4x_nof14, 'PC = 0x55555509c4', seg3_end)

    seg0 = ntt5_4x_nof14[:seg0_end]
    seg1 = ntt5_4x_nof14[seg0_end : seg1_end]
    seg2 = ntt5_4x_nof14[seg1_end : seg2_end]
    seg3 = ntt5_4x_nof14[seg2_end : seg3_end]
    seg4 = ntt5_4x_nof14[seg3_end : seg4_end]
    seg5 = ntt5_4x_nof14[seg4_end:]

    print()
    print('##### ntt5_4x_nof14')
    print()
    print(f'ghost %fb0_{j}{k0}@sint16[8], %fb2_{j}{k0}@sint16[8], %fb3_{j}{k0}@sint16[8] :')
    print(f'    %fb0_{j}{k0} = %v1 /\\')
    print(f'    %fb2_{j}{k0} = %v2 /\\')
    print(f'    %fb3_{j}{k0} = %v6')
    print(f'  &&')
    print(f'    %fb0_{j}{k0} = %v1 /\\')
    print(f'    %fb2_{j}{k0} = %v2 /\\')
    print(f'    %fb3_{j}{k0} = %v6;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %fb0_{j}{k0} = %v1 /\\')
    print(f'    %fb2_{j}{k0} = %v2 /\\')
    print(f'    %fb3_{j}{k0} = %v6 /\\')
    print()
    print(f'    %fb0_{j}{k0} = %fa0_{j}{k0} /\\')
    print(f'    %fb2_{j}{k0} = %fa2_{j}{k0} /\\')
    print(f'    %fb3_{j}{k0} = %fa8_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]]')
    print(f'  &&')
    print(f'    %fb0_{j}{k0} = %v1 /\\')
    print(f'    %fb2_{j}{k0} = %v2 /\\')
    print(f'    %fb3_{j}{k0} = %v6 /\\')
    print()
    print(f'    %fb0_{j}{k0} = %fa0_{j}{k0} /\\')
    print(f'    %fb2_{j}{k0} = %fa2_{j}{k0} /\\')
    print(f'    %fb3_{j}{k0} = %fa8_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]];')
    print()
    cut_id += 1
    print(''.join(seg0), end='')
    print(f'''
assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fb0_{j}{k0} + %fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [4, 4, 4, 4, 4, 4, 4, 4] * (%fb0_{j}{k0} + %fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fb0_{j}{k0} + %fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v7 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fb0_{j}{k0} + %fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v7
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fb0_{j}{k0} - %fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    ([4, 4, 4, 4, 4, 4, 4, 4] * %fb0_{j}{k0} - %fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fb0_{j}{k0} - %fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v1 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fb0_{j}{k0} - %fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v1
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fb2_{j}{k0} + %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v3
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v3
    && true;
''')
    print(''.join(seg4), end='')
    print(f'''
assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v2 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fb2_{j}{k0} - %fb3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v2
    && true;
''')
    print(''.join(seg5), end='')
    print(f'''
cut (* {cut_id} *)
    %v7  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fb0_{j}{k0} +
        %fb2_{j}{k0} +
        %fb3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v18 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fb0_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fb2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fb3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v20 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fb0_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fb2_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fb3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v6  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fb0_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fb2_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fb3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v5  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fb0_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fb2_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fb3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %fb0_{j}{k0} = %fa0_{j}{k0} /\\ %fb2_{j}{k0} = %fa2_{j}{k0} /\\ %fb3_{j}{k0} = %fa8_{j}{k0}
  &&
    %v7  <=s [ 2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16] /\\
    %v7  >=s [ (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16] /\\

    %v18 <=s [8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16] /\\
    %v18 >=s [(-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16] /\\

    %v20 <=s [10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16] /\\
    %v20 >=s [(-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16] /\\

    %v6  <=s [10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16] /\\
    %v6  >=s [(-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16] /\\

    %v5  <=s [8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16] /\\
    %v5  >=s [(-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16] /\\

    %fb0_{j}{k0} = %fa0_{j}{k0} /\\ %fb2_{j}{k0} = %fa2_{j}{k0} /\\ %fb3_{j}{k0} = %fa8_{j}{k0}

    prove with [precondition, cuts[{prologue_cut_id}, {j_iter_prologue_cut_id}, {k0_iter_load_cut_id}]];
''')
    cut_id += 1

def annot_nega_part(nega_part, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(nega_part, 'PC = 0x5555550a48')

    seg0 = nega_part[:seg0_end]
    seg1 = nega_part[seg0_end:]

    print()
    print('###### nega_part')
    print()
    print(''.join(seg0), end='')
    print(f'''
assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    - [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v23
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    - [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v23
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    - [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v23
    = %v16 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    - [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v23
    = %v16
    && true;

assert
    %v16 <= [4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750] /\\
    %v16 >= [-4750, -4750, -4750, -4750, -4750, -4750, -4750, -4750]
    prove with [precondition, algebra solver isl] && true;

assume
    %v16 <= [4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750] /\\
    %v16 >= [-4750, -4750, -4750, -4750, -4750, -4750, -4750, -4750]
  &&
    %v16 <=s [4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16] /\\
    %v16 >=s [(-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16];
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    + [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [-818, -818, -818, -818, -818, -818, -818, -818] * (%fc1_{j}{k0} + %fc2_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    + [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [-818, -818, -818, -818, -818, -818, -818, -818] * (%fc1_{j}{k0} + %fc2_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    + [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [-818, -818, -818, -818, -818, -818, -818, -818] * (%fc1_{j}{k0} + %fc2_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
    + [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    - [-818, -818, -818, -818, -818, -818, -818, -818] * (%fc1_{j}{k0} + %fc2_{j}{k0} - %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v3
    && true;

assert
    %v3 <= [7265, 7265, 7265, 7265, 7265, 7265, 7265, 7265] /\\
    %v3 >= [-7265, -7265, -7265, -7265, -7265, -7265, -7265, -7265]
    prove with [precondition, algebra solver isl] && true;

assume
    %v3 <= [7265, 7265, 7265, 7265, 7265, 7265, 7265, 7265] /\\
    %v3 >= [-7265, -7265, -7265, -7265, -7265, -7265, -7265, -7265]
  &&
    %v3 <=s [7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16] /\\
    %v3 >=s [(-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16];

cut (* {cut_id} *)
    %v16 <= [4750, 4750, 4750, 4750, 4750, 4750, 4750, 4750] /\\
    %v16 >= [-4750, -4750, -4750, -4750, -4750, -4750, -4750, -4750] /\\

    %v3 <= [7265, 7265, 7265, 7265, 7265, 7265, 7265, 7265] /\\
    %v3 >= [-7265, -7265, -7265, -7265, -7265, -7265, -7265, -7265]

    prove with [algebra solver isl],

    %v16 = [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
           - [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v3  = [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * %fc2_{j}{k0}
           + [918, 918, 918, 918, 918, 918, 918, 918] * (%fc1_{j}{k0} - %fc4_{j}{k0})
           - [-818, -818, -818, -818, -818, -818, -818, -818] * (%fc1_{j}{k0} + %fc2_{j}{k0} - %fc4_{j}{k0})
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] )
  &&
    %v16 <=s [4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16, 4750@16] /\\
    %v16 >=s [(-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16, (-4750)@16] /\\

    %v3 <=s [7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16, 7265@16] /\\
    %v3 >=s [(-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16, (-7265)@16];
''')
    cut_id += 1

def annot_ntt5_4x_nof03(ntt5_4x_nof03, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    adds_line = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a34') + 1
    ntt5_4x_nof03[adds_line] = ntt5_4x_nof03[adds_line].replace('add', 'adds %add_dc')
    subc_line = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a40') + 1
    ntt5_4x_nof03[subc_line] = ntt5_4x_nof03[subc_line].replace('sub', 'subc %sub_dc')

    seg0_end = find_first_line(ntt5_4x_nof03, 'PC = 0x55555509ec')
    seg1_end = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a00', seg0_end)
    seg2_end = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a10', seg1_end)
    seg3_end = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a1c', seg1_end)
    nega_end = find_first_line(ntt5_4x_nof03, 'PC = 0x5555550a54', seg3_end)

    seg0 = ntt5_4x_nof03[:seg0_end]
    seg1 = ntt5_4x_nof03[seg0_end : seg1_end]
    seg2 = ntt5_4x_nof03[seg1_end : seg2_end]
    seg3 = ntt5_4x_nof03[seg2_end : seg3_end]
    nega_part = ntt5_4x_nof03[seg3_end : nega_end]
    seg4 = ntt5_4x_nof03[nega_end:]

    print()
    print('##### ntt5_4x_nof03')
    print()
    print(f'ghost %fc1_{j}{k0}@sint16[8], %fc2_{j}{k0}@sint16[8], %fc4_{j}{k0}@sint16[8] :')
    print(f'    %fc1_{j}{k0} = %v16 /\\')
    print(f'    %fc2_{j}{k0} = %v17 /\\')
    print(f'    %fc4_{j}{k0} = %v19')
    print(f'  &&')
    print(f'    %fc1_{j}{k0} = %v16 /\\')
    print(f'    %fc2_{j}{k0} = %v17 /\\')
    print(f'    %fc4_{j}{k0} = %v19;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %fc1_{j}{k0} = %v16 /\\')
    print(f'    %fc2_{j}{k0} = %v17 /\\')
    print(f'    %fc4_{j}{k0} = %v19 /\\')
    print()
    print(f'    %fc1_{j}{k0} = %fa1_{j}{k0} /\\')
    print(f'    %fc2_{j}{k0} = %fa7_{j}{k0} /\\')
    print(f'    %fc4_{j}{k0} = %fa9_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]]')
    print(f'  &&')
    print(f'    %fc1_{j}{k0} = %v16 /\\')
    print(f'    %fc2_{j}{k0} = %v17 /\\')
    print(f'    %fc4_{j}{k0} = %v19 /\\')
    print()
    print(f'    %fc1_{j}{k0} = %fa1_{j}{k0} /\\')
    print(f'    %fc2_{j}{k0} = %fa7_{j}{k0} /\\')
    print(f'    %fc4_{j}{k0} = %fa9_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]];')
    print()
    cut_id += 1
    print(''.join(seg0), end='')
    print(f'''
assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [4, 4, 4, 4, 4, 4, 4, 4] * (%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]
    prove with [algebra solver isl] && true;

assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v21 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v21
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    -(%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    -(%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    -(%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v1 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    -(%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v1
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fc1_{j}{k0} - %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fc1_{j}{k0} - %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fc1_{j}{k0} - %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fc1_{j}{k0} - %fc2_{j}{k0} + %fc4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v3
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
cut (* {cut_id} *)
    %v2  <= [4590, 4590, 4590, 4590, 4590, 4590, 4590, 4590] /\\
    %v2  >= [-4590, -4590, -4590, -4590, -4590, -4590, -4590, -4590] /\\

    %v17 <= [2295, 2295, 2295, 2295, 2295, 2295, 2295, 2295] /\\
    %v17 >= [-2295, -2295, -2295, -2295, -2295, -2295, -2295, -2295] /\\

    %v2  = %fc1_{j}{k0} - %fc4_{j}{k0} /\\
    %v17 = %fc2_{j}{k0}

    prove with [precondition, cuts[{prologue_cut_id}, {j_iter_prologue_cut_id}, {k0_iter_load_cut_id}], algebra solver isl],

    %v21 = [4, 4, 4, 4, 4, 4, 4, 4] * (%fc1_{j}{k0} + %fc2_{j}{k0} + %fc4_{j}{k0})
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v22 = [1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004] * (%fc1_{j}{k0} + %fc4_{j}{k0})
           + [-1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006] * %fc2_{j}{k0}
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v1  = [-1006, -1006, -1006, -1006, -1006, -1006, -1006, -1006] * (%fc1_{j}{k0} + %fc4_{j}{k0})
           + [1004, 1004, 1004, 1004, 1004, 1004, 1004, 1004] * %fc2_{j}{k0}
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] )
  &&
    %v2  <=s [4590@16, 4590@16, 4590@16, 4590@16, 4590@16, 4590@16, 4590@16, 4590@16] /\\
    %v2  >=s [(-4590)@16, (-4590)@16, (-4590)@16, (-4590)@16, (-4590)@16, (-4590)@16, (-4590)@16, (-4590)@16] /\\

    %v17 <=s [2295@16, 2295@16, 2295@16, 2295@16, 2295@16, 2295@16, 2295@16, 2295@16] /\\
    %v17 >=s [(-2295)@16, (-2295)@16, (-2295)@16, (-2295)@16, (-2295)@16, (-2295)@16, (-2295)@16, (-2295)@16] /\\

    %v2  = %fc1_{j}{k0} - %fc4_{j}{k0} /\\
    %v17 = %fc2_{j}{k0} /\\

    %v21 <=s [2960@16, 2960@16, 2960@16, 2960@16, 2960@16, 2960@16, 2960@16, 2960@16] /\\
    %v21 >=s [(-2960)@16, (-2960)@16, (-2960)@16, (-2960)@16, (-2960)@16, (-2960)@16, (-2960)@16, (-2960)@16] /\\

    %v22 <=s [6385@16, 6385@16, 6385@16, 6385@16, 6385@16, 6385@16, 6385@16, 6385@16] /\\
    %v22 >=s [(-6385)@16, (-6385)@16, (-6385)@16, (-6385)@16, (-6385)@16, (-6385)@16, (-6385)@16, (-6385)@16] /\\

    %v1  <=s [6475@16, 6475@16, 6475@16, 6475@16, 6475@16, 6475@16, 6475@16, 6475@16] /\\
    %v1  >=s [(-6475)@16, (-6475)@16, (-6475)@16, (-6475)@16, (-6475)@16, (-6475)@16, (-6475)@16, (-6475)@16]

    prove with [precondition, cuts[{prologue_cut_id}, {j_iter_prologue_cut_id}, {k0_iter_load_cut_id}]];
''')
    cut_id += 1

    annot_nega_part(nega_part, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    print(''.join(seg4), end='')
    print(f'''
cut (* {cut_id} *)
    %v21 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fc1_{j}{k0} +
        %fc2_{j}{k0} +
        %fc4_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v17 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fc1_{j}{k0} -
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fc2_{j}{k0} -
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fc4_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v1  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fc1_{j}{k0} -
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fc2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fc4_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v23 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fc1_{j}{k0} -
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fc2_{j}{k0} -
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fc4_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v2  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fc1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fc2_{j}{k0} -
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fc4_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %fc1_{j}{k0} = %fa1_{j}{k0} /\\ %fc2_{j}{k0} = %fa7_{j}{k0} /\\ %fc4_{j}{k0} = %fa9_{j}{k0}

    prove with [cuts[{cut_id - 3}, {cut_id - 2}]] # TODO
  &&
    %v21 <=s [ 2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16] /\\
    %v21 >=s [ (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16] /\\

    %v17 <=s [11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16] /\\
    %v17 >=s [(-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16] /\\

    %v1  <=s [13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16] /\\
    %v1  >=s [(-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16] /\\

    %v23 <=s [13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16, 13740@16] /\\
    %v23 >=s [(-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16, (-13740)@16] /\\

    %v2  <=s [11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16, 11135@16] /\\
    %v2  >=s [(-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16, (-11135)@16] /\\

    %fc1_{j}{k0} = %fa1_{j}{k0} /\\ %fc2_{j}{k0} = %fa7_{j}{k0} /\\ %fc4_{j}{k0} = %fa9_{j}{k0}

    prove with [cuts[{cut_id - 3}, {cut_id - 2}]]; # TODO
''')
    cut_id += 1

def annot_jgt2_ntt5_4x_nof14(ntt5_4x_nof14, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550b80')
    seg1_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550b98', seg0_end)
    seg2_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550ba4', seg1_end)
    seg3_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550bbc', seg2_end)
    seg4_end = find_first_line(ntt5_4x_nof14, 'PC = 0x5555550bc8', seg3_end)

    seg0 = ntt5_4x_nof14[:seg0_end]
    seg1 = ntt5_4x_nof14[seg0_end : seg1_end]
    seg2 = ntt5_4x_nof14[seg1_end : seg2_end]
    seg3 = ntt5_4x_nof14[seg2_end : seg3_end]
    seg4 = ntt5_4x_nof14[seg3_end : seg4_end]
    seg5 = ntt5_4x_nof14[seg4_end:]

    print()
    print('##### ntt5_4x_nof14')
    print()
    print(f'ghost %fe0_{j}{k0}@sint16[8], %fe2_{j}{k0}@sint16[8], %fe3_{j}{k0}@sint16[8] :')
    print(f'    %fe0_{j}{k0} = %v2 /\\')
    print(f'    %fe2_{j}{k0} = %v3 /\\')
    print(f'    %fe3_{j}{k0} = %v6')
    print(f'  &&')
    print(f'    %fe0_{j}{k0} = %v2 /\\')
    print(f'    %fe2_{j}{k0} = %v3 /\\')
    print(f'    %fe3_{j}{k0} = %v6;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %fe0_{j}{k0} = %v2 /\\')
    print(f'    %fe2_{j}{k0} = %v3 /\\')
    print(f'    %fe3_{j}{k0} = %v6 /\\')
    print()
    print(f'    %fe0_{j}{k0} = %fd0_{j}{k0} /\\')
    print(f'    %fe2_{j}{k0} = %fd2_{j}{k0} /\\')
    print(f'    %fe3_{j}{k0} = %fd8_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]]')
    print(f'  &&')
    print(f'    %fe0_{j}{k0} = %v2 /\\')
    print(f'    %fe2_{j}{k0} = %v3 /\\')
    print(f'    %fe3_{j}{k0} = %v6 /\\')
    print()
    print(f'    %fe0_{j}{k0} = %fd0_{j}{k0} /\\')
    print(f'    %fe2_{j}{k0} = %fd2_{j}{k0} /\\')
    print(f'    %fe3_{j}{k0} = %fd8_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]];')
    print()
    cut_id += 1
    print(''.join(seg0), end='')
    print(f'''
assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fe0_{j}{k0} + %fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [4, 4, 4, 4, 4, 4, 4, 4] * (%fe0_{j}{k0} + %fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fe0_{j}{k0} + %fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v7 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [4, 4, 4, 4, 4, 4, 4, 4] * (%fe0_{j}{k0} + %fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v7
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fe0_{j}{k0} - %fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    ([4, 4, 4, 4, 4, 4, 4, 4] * %fe0_{j}{k0} - %fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fe0_{j}{k0} - %fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v2 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    ([4, 4, 4, 4, 4, 4, 4, 4] * %fe0_{j}{k0} - %fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v2
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v5 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%fe2_{j}{k0} + %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v5
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v5 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v5
    && true;
''')
    print(''.join(seg4), end='')
    print(f'''
assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-1736, -1736, -1736, -1736, -1736, -1736, -1736, -1736] * (%fe2_{j}{k0} - %fe3_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v6
    = %v3
    && true;
''')
    print(''.join(seg5), end='')
    print(f'''
cut (* {cut_id} *)
    %v7  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fe0_{j}{k0} +
        %fe2_{j}{k0} +
        %fe3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v19 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fe0_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fe2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fe3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v2  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fe0_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fe2_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fe3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v22 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fe0_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fe2_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fe3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v17 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fe0_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fe2_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fe3_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %fe0_{j}{k0} = %fd0_{j}{k0} /\\ %fe2_{j}{k0} = %fd2_{j}{k0} /\\ %fe3_{j}{k0} = %fd8_{j}{k0}

  &&
    %v7  <=s [ 2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16,  2960@16] /\\
    %v7  >=s [ (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16,  (-2960)@16] /\\

    %v19 <=s [8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16] /\\
    %v19 >=s [(-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16] /\\

    %v2  <=s [10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16] /\\
    %v2  >=s [(-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16] /\\

    %v22 <=s [10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16, 10970@16] /\\
    %v22 >=s [(-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16, (-10970)@16] /\\

    %v17 <=s [8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16, 8925@16] /\\
    %v17 >=s [(-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16, (-8925)@16] /\\

    %fe0_{j}{k0} = %fd0_{j}{k0} /\\ %fe2_{j}{k0} = %fd2_{j}{k0} /\\ %fe3_{j}{k0} = %fd8_{j}{k0}

    prove with [precondition, cuts[{prologue_cut_id}, {j_iter_prologue_cut_id}, {k0_iter_load_cut_id}]];
''')
    cut_id += 1

def annot_ntt5_4x_nof023(ntt5_4x_nof023, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(ntt5_4x_nof023, 'PC = 0x5555550bec')
    seg1_end = find_first_line(ntt5_4x_nof023, 'PC = 0x5555550c00', seg0_end)
    seg2_end = find_first_line(ntt5_4x_nof023, 'PC = 0x5555550c0c', seg1_end)
    seg3_end = find_first_line(ntt5_4x_nof023, 'PC = 0x5555550c24', seg2_end)
    seg4_end = find_first_line(ntt5_4x_nof023, 'PC = 0x5555550c30', seg3_end)

    seg0 = ntt5_4x_nof023[:seg0_end]
    seg1 = ntt5_4x_nof023[seg0_end : seg1_end]
    seg2 = ntt5_4x_nof023[seg1_end : seg2_end]
    seg3 = ntt5_4x_nof023[seg2_end : seg3_end]
    seg4 = ntt5_4x_nof023[seg3_end : seg4_end]
    seg5 = ntt5_4x_nof023[seg4_end:]

    print()
    print('##### ntt5_4x_nof023')
    print()
    print(f'ghost %ff1_{j}{k0}@sint16[8], %ff4_{j}{k0}@sint16[8] :')
    print(f'    %ff1_{j}{k0} = %v16 /\\')
    print(f'    %ff4_{j}{k0} = %v18')
    print(f'  &&')
    print(f'    %ff1_{j}{k0} = %v16 /\\')
    print(f'    %ff4_{j}{k0} = %v18;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %ff1_{j}{k0} = %v16 /\\')
    print(f'    %ff4_{j}{k0} = %v18 /\\')
    print()
    print(f'    %ff1_{j}{k0} = %fd1_{j}{k0} /\\')
    print(f'    %ff4_{j}{k0} = %fd9_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]]')
    print(f'  &&')
    print(f'    %ff1_{j}{k0} = %v16 /\\')
    print(f'    %ff4_{j}{k0} = %v18 /\\')
    print()
    print(f'    %ff1_{j}{k0} = %fd1_{j}{k0} /\\')
    print(f'    %ff4_{j}{k0} = %fd9_{j}{k0}')
    print()
    print(f'    prove with [cuts[{k0_iter_load_cut_id}]];')
    print()
    cut_id += 1
    print(''.join(seg0), end='')
    print(f'''
assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [4, 4, 4, 4, 4, 4, 4, 4] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [4, 4, 4, 4, 4, 4, 4, 4] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v23 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [4, 4, 4, 4, 4, 4, 4, 4] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v23
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    -(%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    -(%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    -(%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    -(%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v3
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v5 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [1005, 1005, 1005, 1005, 1005, 1005, 1005, 1005] * (%ff1_{j}{k0} + %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v1
    = %v5
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
assert
    [918, 918, 918, 918, 918, 918, 918, 918] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [918, 918, 918, 918, 918, 918, 918, 918] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [918, 918, 918, 918, 918, 918, 918, 918] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v6 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [918, 918, 918, 918, 918, 918, 918, 918] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v6
    && true;
''')
    print(''.join(seg4), end='')
    print(f'''
assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    [-818, -818, -818, -818, -818, -818, -818, -818] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v1 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    [-818, -818, -818, -818, -818, -818, -818, -818] * (%ff1_{j}{k0} - %ff4_{j}{k0})
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v5
    = %v1
    && true;
''')
    print(''.join(seg5), end='')
    print(f'''
cut (* {cut_id} *)
    %v23 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %ff1_{j}{k0} +
        %ff4_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v16 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %ff1_{j}{k0} -
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %ff4_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v3  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %ff1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %ff4_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v5  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %ff1_{j}{k0} -
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %ff4_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v21 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %ff1_{j}{k0} -
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %ff4_{j}{k0}
    )
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %ff1_{j}{k0} = %fd1_{j}{k0} /\\ %ff4_{j}{k0} = %fd9_{j}{k0}
  &&
    %v23 <=s [ 2545@16,  2545@16,  2545@16,  2545@16,  2545@16,  2545@16,  2545@16,  2545@16] /\\
    %v23 >=s [ (-2545)@16,  (-2545)@16,  (-2545)@16,  (-2545)@16,  (-2545)@16,  (-2545)@16,  (-2545)@16,  (-2545)@16] /\\

    %v16 <=s [8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16] /\\
    %v16 >=s [(-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16] /\\

    %v3  <=s [10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16] /\\
    %v3  >=s [(-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16] /\\

    %v5  <=s [10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16, 10595@16] /\\
    %v5  >=s [(-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16, (-10595)@16] /\\

    %v21 <=s [8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16, 8110@16] /\\
    %v21 >=s [(-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16, (-8110)@16] /\\

    %ff1_{j}{k0} = %fd1_{j}{k0} /\\ %ff4_{j}{k0} = %fd9_{j}{k0}

    prove with [precondition, cuts[{prologue_cut_id}, {j_iter_prologue_cut_id}, {k0_iter_load_cut_id}]];
''')
    cut_id += 1

def annot_ntt10_4x_nof3546(ntt10_4x_nof3546, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    ntt5_4x_nof14_end = find_first_line(ntt10_4x_nof3546, 'PC = 0x55555509d8')
    ntt5_4x_nof03_end = find_first_line(ntt10_4x_nof3546, 'PC = 0x5555550a64', ntt5_4x_nof14_end)

    ntt5_4x_nof14 = ntt10_4x_nof3546[:ntt5_4x_nof14_end]
    ntt5_4x_nof03 = ntt10_4x_nof3546[ntt5_4x_nof14_end : ntt5_4x_nof03_end]
    addsub = ntt10_4x_nof3546[ntt5_4x_nof03_end:]

    print()
    print('#### ntt10_4x_nof3546')
    print()

    annot_ntt5_4x_nof14(ntt5_4x_nof14, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)
    annot_ntt5_4x_nof03(ntt5_4x_nof03, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    print()
    print('##### addsub')
    print()
    print(''.join(addsub), end='')
    print(f'''
cut (* {cut_id} *)
    %v22 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        %fa1_{j}{k0} +
        %fa2_{j}{k0} +
        %fa7_{j}{k0} +
        %fa8_{j}{k0} +
        %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v21 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} -
        %fa1_{j}{k0} +
        %fa2_{j}{k0} -
        %fa7_{j}{k0} +
        %fa8_{j}{k0} -
        %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v19 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa1_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa2_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa7_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa8_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v16 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fa1_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa2_{j}{k0} +
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fa7_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa8_{j}{k0} +
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v18 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa1_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa2_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa7_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa8_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v1  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fa1_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa2_{j}{k0} +
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fa7_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa8_{j}{k0} +
        [-1610, -1610, -1610, -1610, -1610, -1610, -1610, -1610] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v17 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa1_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa2_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa7_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa8_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v6  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [-1610, -1610, -1610, -1610, -1610, -1610, -1610, -1610] * %fa1_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa2_{j}{k0} +
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fa7_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa8_{j}{k0} +
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v7  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fa1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa7_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa8_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v5  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fa0_{j}{k0} +
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fa1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fa2_{j}{k0} +
        [-1610, -1610, -1610, -1610, -1610, -1610, -1610, -1610] * %fa7_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fa8_{j}{k0} +
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fa9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] )

    prove with [cuts[{cut_id - 5}, {cut_id - 1}]] # TODO
  &&
    %v22 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v21 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v19 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v16 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v18 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v1  <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v17 <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v6  <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v7  <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\
    %v5  <=s [24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16, 24710@16] /\\

    %v22 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v21 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v19 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v16 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v18 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v1  >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v17 >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v6  >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v7  >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16] /\\
    %v5  >=s [(-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16, (-24710)@16]

    prove with [cuts[{cut_id - 5}, {cut_id - 1}]]; # TODO
''')
    cut_id += 1

def annot_ntt10_4x_nof35467(ntt10_4x_nof35467, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    ntt5_4x_nof14_end = find_first_line(ntt10_4x_nof35467, 'PC = 0x5555550bdc')
    ntt5_4x_nof023_end = find_first_line(ntt10_4x_nof35467, 'PC = 0x5555550c44', ntt5_4x_nof14_end)

    ntt5_4x_nof14 = ntt10_4x_nof35467[:ntt5_4x_nof14_end]
    ntt5_4x_nof023 = ntt10_4x_nof35467[ntt5_4x_nof14_end : ntt5_4x_nof023_end]
    addsub = ntt10_4x_nof35467[ntt5_4x_nof023_end:]

    print()
    print('#### ntt10_4x_nof35467')
    print()

    annot_jgt2_ntt5_4x_nof14(ntt5_4x_nof14, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)
    annot_ntt5_4x_nof023(ntt5_4x_nof023, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    print()
    print('##### addsub')
    print()
    print(''.join(addsub), end='')
    print()
    print(f'''
cut (* {cut_id} *)
    %v24 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        %fd1_{j}{k0} +
        %fd2_{j}{k0} +
        %fd8_{j}{k0} +
        %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v23 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} -
        %fd1_{j}{k0} +
        %fd2_{j}{k0} +
        %fd8_{j}{k0} -
        %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v20 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd1_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd8_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v16 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fd1_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd2_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd8_{j}{k0} +
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v19 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd1_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd2_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd8_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v6  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fd1_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd2_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd8_{j}{k0} +
        [-1610, -1610, -1610, -1610, -1610, -1610, -1610, -1610] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v18 = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd1_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd2_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd8_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v5  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [-1610, -1610, -1610, -1610, -1610, -1610, -1610, -1610] * %fd1_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd2_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd8_{j}{k0} +
        [ 2113,  2113,  2113,  2113,  2113,  2113,  2113,  2113] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v7  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [-2274, -2274, -2274, -2274, -2274, -2274, -2274, -2274] * %fd1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd2_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd8_{j}{k0} +
        [-1815, -1815, -1815, -1815, -1815, -1815, -1815, -1815] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %v1  = [4, 4, 4, 4, 4, 4, 4, 4] * (
        %fd0_{j}{k0} +
        [ 2274,  2274,  2274,  2274,  2274,  2274,  2274,  2274] * %fd1_{j}{k0} +
        [ 1610,  1610,  1610,  1610,  1610,  1610,  1610,  1610] * %fd2_{j}{k0} +
        [-2113, -2113, -2113, -2113, -2113, -2113, -2113, -2113] * %fd8_{j}{k0} +
        [ 1815,  1815,  1815,  1815,  1815,  1815,  1815,  1815] * %fd9_{j}{k0}
    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] )

    prove with [cuts[{cut_id - 3}, {cut_id - 1}]] # TODO
  &&
    %v24 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v23 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v20 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v16 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v19 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v6  <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v18 <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v5  <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v7  <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\
    %v1  <=s [21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16, 21565@16] /\\

    %v24 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v23 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v20 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v16 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v19 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v6  >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v18 >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v5  >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v7  >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16] /\\
    %v1  >=s [(-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16, (-21565)@16]

    prove with [cuts[{cut_id - 3}, {cut_id - 1}]]; # TODO
''')
    cut_id += 1

twist_table = [
    [-2274, -16231,  1610,  11491, -2113, -15081, -1815, -12954, -2274, -16231,  1610,  11491, -2113, -15081, -1815, -12954],
    [ 2113,  15081, -2274, -16231,  1815,  12954,  1610,  11491, -2113, -15081,  2274,  16231, -1815, -12954, -1610, -11491],
    [    1,      7,     1,      7,     1,      7,     1,      7,     1,      7,     1,      7,     1,      7,     1,      7],
    [-1610, -11491, -1815, -12954,  2274,  16231, -2113, -15081,  1610,  11491,  1815,  12954, -2274, -16231,  2113,  15081],
    [-1815, -12954, -2113, -15081,  1610,  11491, -2274, -16231, -1815, -12954, -2113, -15081,  1610,  11491, -2274, -16231],
    [ 2274,  16231,  1610,  11491,  2113,  15081, -1815, -12954, -2274, -16231, -1610, -11491, -2113, -15081,  1815,  12954],
    [-2113, -15081, -2274, -16231, -1815, -12954,  1610,  11491, -2113, -15081, -2274, -16231, -1815, -12954,  1610,  11491],
    [   -1,     -7,     1,      7,    -1,     -7,     1,      7,     1,      7,    -1,     -7,     1,      7,    -1,     -7],
    [ 1610,  11491, -1815, -12954, -2274, -16231, -2113, -15081,  1610,  11491, -1815, -12954, -2274, -16231, -2113, -15081],
]

def annot_twist_his(twist_his, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(twist_his, 'PC = 0x5555550a98')
    seg1_end = find_first_line(twist_his, 'PC = 0x5555550aa0', seg0_end)
    seg2_end = find_first_line(twist_his, 'PC = 0x5555550aac', seg1_end)
    seg3_end = find_first_line(twist_his, 'PC = 0x5555550ab8', seg2_end)
    seg4_end = find_first_line(twist_his, 'PC = 0x5555550ac4', seg3_end)
    seg5_end = find_first_line(twist_his, 'PC = 0x5555550ad0', seg4_end)
    seg6_end = find_first_line(twist_his, 'PC = 0x5555550adc', seg5_end)
    seg7_end = find_first_line(twist_his, 'PC = 0x5555550ae8', seg6_end)
    seg8_end = find_first_line(twist_his, 'PC = 0x5555550af4', seg7_end)
    seg9_end = find_first_line(twist_his, 'PC = 0x5555550b04', seg8_end)

    seg0 = twist_his[:seg0_end]
    seg1 = twist_his[seg0_end : seg1_end]
    seg2 = twist_his[seg1_end : seg2_end]
    seg3 = twist_his[seg2_end : seg3_end]
    seg4 = twist_his[seg3_end : seg4_end]
    seg5 = twist_his[seg4_end : seg5_end]
    seg6 = twist_his[seg5_end : seg6_end]
    seg7 = twist_his[seg6_end : seg7_end]
    seg8 = twist_his[seg7_end : seg8_end]
    seg9 = twist_his[seg8_end : seg9_end]
    seg10 = twist_his[seg9_end:]

    coefs = twist_table[j][::2]

    print()
    print('#### twist_his')
    print(f'''
ghost
    %hha0_{j}{k0}@sint16[8], %hha1_{j}{k0}@sint16[8], %hha2_{j}{k0}@sint16[8], %hha3_{j}{k0}@sint16[8], %hha4_{j}{k0}@sint16[8],
    %hha5_{j}{k0}@sint16[8], %hha6_{j}{k0}@sint16[8], %hha7_{j}{k0}@sint16[8], %hha8_{j}{k0}@sint16[8], %hha9_{j}{k0}@sint16[8] :

    %hha0_{j}{k0} = %v22 /\\ %hha1_{j}{k0} = %v6  /\\ %hha2_{j}{k0} = %v19 /\\ %hha3_{j}{k0} = %v5  /\\ %hha4_{j}{k0} = %v18 /\\
    %hha5_{j}{k0} = %v21 /\\ %hha6_{j}{k0} = %v17 /\\ %hha7_{j}{k0} = %v16 /\\ %hha8_{j}{k0} = %v7  /\\ %hha9_{j}{k0} = %v1
  &&
    %hha0_{j}{k0} = %v22 /\\ %hha1_{j}{k0} = %v6  /\\ %hha2_{j}{k0} = %v19 /\\ %hha3_{j}{k0} = %v5  /\\ %hha4_{j}{k0} = %v18 /\\
    %hha5_{j}{k0} = %v21 /\\ %hha6_{j}{k0} = %v17 /\\ %hha7_{j}{k0} = %v16 /\\ %hha8_{j}{k0} = %v7  /\\ %hha9_{j}{k0} = %v1;
''')
    print(''.join(seg0), end='')
    print(f'''
assert
    %hha0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %hha0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    %hha0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v22 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %hha0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v22
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    %hha5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %hha5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    %hha5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v21 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %hha5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v21
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    {format_coefs([coefs[0]] * 8)} * %hha1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[0]] * 8)} * %hha1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[0]] * 8)} * %hha1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v6  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[0]] * 8)} * %hha1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v6
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
assert
    {format_coefs([coefs[1]] * 8)} * %hha2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[1]] * 8)} * %hha2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[1]] * 8)} * %hha2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v19 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[1]] * 8)} * %hha2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v19
    && true;
''')
    print(''.join(seg4), end='')
    print(f'''
assert
    {format_coefs([coefs[2]] * 8)} * %hha3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[2]] * 8)} * %hha3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[2]] * 8)} * %hha3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v5  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[2]] * 8)} * %hha3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v5
    && true;
''')
    print(''.join(seg5), end='')
    print(f'''
assert
    {format_coefs([coefs[3]] * 8)} * %hha4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[3]] * 8)} * %hha4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[3]] * 8)} * %hha4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v18 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[3]] * 8)} * %hha4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v18
    && true;
''')
    print(''.join(seg6), end='')
    print(f'''
assert
    {format_coefs([coefs[4]] * 8)} * %hha6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[4]] * 8)} * %hha6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[4]] * 8)} * %hha6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v17 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[4]] * 8)} * %hha6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v17
    && true;
''')
    print(''.join(seg7), end='')
    print(f'''
assert
    {format_coefs([coefs[5]] * 8)} * %hha7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[5]] * 8)} * %hha7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[5]] * 8)} * %hha7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v16 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[5]] * 8)} * %hha7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v16
    && true;
''')
    print(''.join(seg8), end='')
    print(f'''
assert
    {format_coefs([coefs[6]] * 8)} * %hha8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[6]] * 8)} * %hha8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[6]] * 8)} * %hha8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v7  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[6]] * 8)} * %hha8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v7
    && true;
''')
    print(''.join(seg9), end='')
    print(f'''
assert
    {format_coefs([coefs[7]] * 8)} * %hha9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[7]] * 8)} * %hha9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[7]] * 8)} * %hha9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v1  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[7]] * 8)} * %hha9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v1
    && true;
''')
    print(''.join(seg10), end='')
    print()
    print(f'cut (* {cut_id} *)')

    regs = [22, 6, 19, 5, 18, 21, 17, 16, 7, 1]
    for ii, reg in enumerate(regs):
        print(f'    %v{reg:<2} = [4, 4, 4, 4, 4, 4, 4, 4] * (')
        lines = []
        for di in range(10):
            i = (2 - j + di) % 10
            if i in [3, 4, 5, 6]:
                lines.append('[0, 0, 0, 0, 0, 0, 0, 0]')
                continue
            pow = ii * di % 10
            if pow == 0:
                lines.append(f'%fa{i}_{j}{k0}')
            elif pow == 1:
                lines.append(f'{format_arr(["W10"] * 8)} * %fa{i}_{j}{k0}')
            else:
                coefs = format_arr([f'W10**{pow}'] * 8)
                lines.append(f'{coefs} * %fa{i}_{j}{k0}')
        lines = ['        ' + l for l in lines]
        print(' +\n'.join(lines))
        print(f'    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\')
        print()

    print(f'''\
    true # TODO
    prove with [precondition]
  &&
    %v22 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v6  <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v19 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v5  <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v18 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v21 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v17 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v16 <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v7  <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\
    %v1  <=s [3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16, 3875@16] /\\

    %v22 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v6  >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v19 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v5  >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v18 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v21 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v17 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v16 >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v7  >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16] /\\
    %v1  >=s [(-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16, (-3875)@16];
''')
    cut_id += 1

def annot_jgt2_twist_his(twist_his, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id):
    global cut_id

    seg0_end = find_first_line(twist_his, 'PC = 0x5555550c78')
    seg1_end = find_first_line(twist_his, 'PC = 0x5555550c80', seg0_end)
    seg2_end = find_first_line(twist_his, 'PC = 0x5555550c8c', seg1_end)
    seg3_end = find_first_line(twist_his, 'PC = 0x5555550c98', seg2_end)
    seg4_end = find_first_line(twist_his, 'PC = 0x5555550ca4', seg3_end)
    seg5_end = find_first_line(twist_his, 'PC = 0x5555550cb0', seg4_end)
    seg6_end = find_first_line(twist_his, 'PC = 0x5555550cbc', seg5_end)
    seg7_end = find_first_line(twist_his, 'PC = 0x5555550cc8', seg6_end)
    seg8_end = find_first_line(twist_his, 'PC = 0x5555550cd4', seg7_end)
    seg9_end = find_first_line(twist_his, 'PC = 0x5555550ce4', seg8_end)

    seg0 = twist_his[:seg0_end]
    seg1 = twist_his[seg0_end : seg1_end]
    seg2 = twist_his[seg1_end : seg2_end]
    seg3 = twist_his[seg2_end : seg3_end]
    seg4 = twist_his[seg3_end : seg4_end]
    seg5 = twist_his[seg4_end : seg5_end]
    seg6 = twist_his[seg5_end : seg6_end]
    seg7 = twist_his[seg6_end : seg7_end]
    seg8 = twist_his[seg7_end : seg8_end]
    seg9 = twist_his[seg8_end : seg9_end]
    seg10 = twist_his[seg9_end:]

    coefs = twist_table[j][::2]

    print()
    print('#### twist_his')
    print(f'''
ghost
    %hhd0_{j}{k0}@sint16[8], %hhd1_{j}{k0}@sint16[8], %hhd2_{j}{k0}@sint16[8], %hhd3_{j}{k0}@sint16[8], %hhd4_{j}{k0}@sint16[8],
    %hhd5_{j}{k0}@sint16[8], %hhd6_{j}{k0}@sint16[8], %hhd7_{j}{k0}@sint16[8], %hhd8_{j}{k0}@sint16[8], %hhd9_{j}{k0}@sint16[8] :

    %hhd0_{j}{k0} = %v24 /\\ %hhd1_{j}{k0} = %v5  /\\ %hhd2_{j}{k0} = %v20 /\\ %hhd3_{j}{k0} = %v1  /\\ %hhd4_{j}{k0} = %v19 /\\
    %hhd5_{j}{k0} = %v23 /\\ %hhd6_{j}{k0} = %v18 /\\ %hhd7_{j}{k0} = %v16 /\\ %hhd8_{j}{k0} = %v7  /\\ %hhd9_{j}{k0} = %v6
  &&
    %hhd0_{j}{k0} = %v24 /\\ %hhd1_{j}{k0} = %v5  /\\ %hhd2_{j}{k0} = %v20 /\\ %hhd3_{j}{k0} = %v1  /\\ %hhd4_{j}{k0} = %v19 /\\
    %hhd5_{j}{k0} = %v23 /\\ %hhd6_{j}{k0} = %v18 /\\ %hhd7_{j}{k0} = %v16 /\\ %hhd8_{j}{k0} = %v7  /\\ %hhd9_{j}{k0} = %v6;
''')
    print(''.join(seg0), end='')
    print(f'''
assert
    %hhd0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %hhd0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    %hhd0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v24 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %hhd0_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v24
    && true;
''')
    print(''.join(seg1), end='')
    print(f'''
assert
    %hhd5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %hhd5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    %hhd5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v23 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %hhd5_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v23
    && true;
''')
    print(''.join(seg2), end='')
    print(f'''
assert
    {format_coefs([coefs[0]] * 8)} * %hhd1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[0]] * 8)} * %hhd1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[0]] * 8)} * %hhd1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v5  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[0]] * 8)} * %hhd1_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v5
    && true;
''')
    print(''.join(seg3), end='')
    print(f'''
assert
    {format_coefs([coefs[1]] * 8)} * %hhd2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[1]] * 8)} * %hhd2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[1]] * 8)} * %hhd2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v20 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[1]] * 8)} * %hhd2_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v20
    && true;
''')
    print(''.join(seg4), end='')
    print(f'''
assert
    {format_coefs([coefs[2]] * 8)} * %hhd3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[2]] * 8)} * %hhd3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[2]] * 8)} * %hhd3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v1  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[2]] * 8)} * %hhd3_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v1
    && true;
''')
    print(''.join(seg5), end='')
    print(f'''
assert
    {format_coefs([coefs[3]] * 8)} * %hhd4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[3]] * 8)} * %hhd4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[3]] * 8)} * %hhd4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v19 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[3]] * 8)} * %hhd4_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v17
    = %v19
    && true;
''')
    print(''.join(seg6), end='')
    print(f'''
assert
    {format_coefs([coefs[4]] * 8)} * %hhd6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v21
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[4]] * 8)} * %hhd6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v21
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[4]] * 8)} * %hhd6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v21
    = %v17 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[4]] * 8)} * %hhd6_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v20
    = %v17
    && true;
''')
    print(''.join(seg7), end='')
    print(f'''
assert
    {format_coefs([coefs[5]] * 8)} * %hhd7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[5]] * 8)} * %hhd7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[5]] * 8)} * %hhd7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v16 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[5]] * 8)} * %hhd7_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v16
    && true;
''')
    print(''.join(seg8), end='')
    print(f'''
assert
    {format_coefs([coefs[6]] * 8)} * %hhd8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[6]] * 8)} * %hhd8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[6]] * 8)} * %hhd8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v7  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[6]] * 8)} * %hhd8_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v7
    && true;
''')
    print(''.join(seg9), end='')
    print(f'''
assert
    {format_coefs([coefs[7]] * 8)} * %hhd9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([coefs[7]] * 8)} * %hhd9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl] && true;

assert
    {format_coefs([coefs[7]] * 8)} * %hhd9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v3  ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([coefs[7]] * 8)} * %hhd9_{j}{k0}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v18
    = %v3
    && true;
''')
    print(''.join(seg10), end='')
    print()
    print(f'cut (* {cut_id} *)')

    regs = [24, 5, 20, 1, 19, 23, 17, 16, 7, 3]
    for ii, reg in enumerate(regs):
        print(f'    %v{reg:<2} = [4, 4, 4, 4, 4, 4, 4, 4] * (')
        lines = []
        for di in range(10):
            i = (2 - j + di) % 10
            if i in [3, 4, 5, 6, 7]:
                lines.append('[0, 0, 0, 0, 0, 0, 0, 0]')
                continue
            pow = ii * di % 10
            if pow == 0:
                lines.append(f'%fd{i}_{j}{k0}')
            elif pow == 1:
                lines.append(f'{format_arr(["W10"] * 8)} * %fd{i}_{j}{k0}')
            else:
                coefs = format_arr([f'W10**{pow}'] * 8)
                lines.append(f'{coefs} * %fd{i}_{j}{k0}')
        lines = ['        ' + l for l in lines]
        print(' +\n'.join(lines))
        print(f'    ) ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\')
        print()

    print(f'''\
    true # TODO
    prove with [precondition]
  &&
    %v24 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v5  <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v20 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v1  <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v19 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v23 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v17 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v16 <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v7  <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\
    %v3  <=s [3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16, 3670@16] /\\

    %v24 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v5  >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v20 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v1  >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v19 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v23 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v17 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v16 >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v7  >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16] /\\
    %v3  >=s [(-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16, (-3670)@16];
''')
    cut_id += 1

def annot_jle2_k0_iter(k0_iter, j, k0, prologue_cut_id, j_iter_prologue_cut_id):
    global cut_id

    load_end = find_first_line(k0_iter, 'PC = 0x5555550968')
    ntt10_4x_nof3546_end = find_first_line(k0_iter, 'PC = 0x5555550a8c', load_end)
    twist_his_end = find_first_line(k0_iter, 'PC = 0x5555550904', ntt10_4x_nof3546_end)

    load = k0_iter[:load_end]
    ntt10_4x_nof3546 = k0_iter[load_end : ntt10_4x_nof3546_end]
    twist_his = k0_iter[ntt10_4x_nof3546_end : twist_his_end]
    store = k0_iter[twist_his_end:]

    print()
    print('### k0_iter')
    print()

    print()
    print('#### load')
    print()
    print(''.join(load), end='')
    print()
    print(f'ghost %fa0_{j}{k0}@sint16[8], %fa1_{j}{k0}@sint16[8], %fa2_{j}{k0}@sint16[8], %fa7_{j}{k0}@sint16[8], %fa8_{j}{k0}@sint16[8], %fa9_{j}{k0}@sint16[8] :')
    print(f'    %fa0_{j}{k0} = %v1  /\\')
    print(f'    %fa1_{j}{k0} = %v16 /\\')
    print(f'    %fa2_{j}{k0} = %v2  /\\')
    print(f'    %fa7_{j}{k0} = %v17 /\\')
    print(f'    %fa8_{j}{k0} = %v6  /\\')
    print(f'    %fa9_{j}{k0} = %v19')
    print(f'  &&')
    print(f'    %fa0_{j}{k0} = %v1  /\\')
    print(f'    %fa1_{j}{k0} = %v16 /\\')
    print(f'    %fa2_{j}{k0} = %v2  /\\')
    print(f'    %fa7_{j}{k0} = %v17 /\\')
    print(f'    %fa8_{j}{k0} = %v6  /\\')
    print(f'    %fa9_{j}{k0} = %v19;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %fa0_{j}{k0} = %v1  /\\')
    print(f'    %fa1_{j}{k0} = %v16 /\\')
    print(f'    %fa2_{j}{k0} = %v2  /\\')
    print(f'    %fa7_{j}{k0} = %v17 /\\')
    print(f'    %fa8_{j}{k0} = %v6  /\\')
    print(f'    %fa9_{j}{k0} = %v19 /\\')
    print()
    if k0 == 0:
        print(f'    %fa0_{j}{k0} = %fa0_{j}[:8] /\\')
        print(f'    %fa1_{j}{k0} = %fa1_{j}[:8] /\\')
        print(f'    %fa2_{j}{k0} = %fa2_{j}[:8] /\\')
        print(f'    %fa7_{j}{k0} = %fa7_{j}[:8] /\\')
        print(f'    %fa8_{j}{k0} = %fa8_{j}[:8] /\\')
        print(f'    %fa9_{j}{k0} = %fa9_{j}[:8]')
    else:
        print(f'    %fa0_{j}{k0} = %fa0_{j}[8:] /\\')
        print(f'    %fa1_{j}{k0} = %fa1_{j}[8:] /\\')
        print(f'    %fa2_{j}{k0} = %fa2_{j}[8:] /\\')
        print(f'    %fa7_{j}{k0} = %fa7_{j}[8:] /\\')
        print(f'    %fa8_{j}{k0} = %fa8_{j}[8:] /\\')
        print(f'    %fa9_{j}{k0} = %fa9_{j}[8:]')
    print()
    print(f'    prove with [cuts[{j_iter_prologue_cut_id}]]')
    print(f'  &&')
    print(f'    %fa0_{j}{k0} = %v1  /\\')
    print(f'    %fa1_{j}{k0} = %v16 /\\')
    print(f'    %fa2_{j}{k0} = %v2  /\\')
    print(f'    %fa7_{j}{k0} = %v17 /\\')
    print(f'    %fa8_{j}{k0} = %v6  /\\')
    print(f'    %fa9_{j}{k0} = %v19 /\\')
    print()
    if k0 == 0:
        print(f'    %fa0_{j}{k0} = %fa0_{j}[:8] /\\')
        print(f'    %fa1_{j}{k0} = %fa1_{j}[:8] /\\')
        print(f'    %fa2_{j}{k0} = %fa2_{j}[:8] /\\')
        print(f'    %fa7_{j}{k0} = %fa7_{j}[:8] /\\')
        print(f'    %fa8_{j}{k0} = %fa8_{j}[:8] /\\')
        print(f'    %fa9_{j}{k0} = %fa9_{j}[:8]')
    else:
        print(f'    %fa0_{j}{k0} = %fa0_{j}[8:] /\\')
        print(f'    %fa1_{j}{k0} = %fa1_{j}[8:] /\\')
        print(f'    %fa2_{j}{k0} = %fa2_{j}[8:] /\\')
        print(f'    %fa7_{j}{k0} = %fa7_{j}[8:] /\\')
        print(f'    %fa8_{j}{k0} = %fa8_{j}[8:] /\\')
        print(f'    %fa9_{j}{k0} = %fa9_{j}[8:]')
    print()
    print(f'    prove with [cuts[{j_iter_prologue_cut_id}]];')
    print()
    k0_iter_load_cut_id = cut_id
    cut_id += 1

    annot_ntt10_4x_nof3546(ntt10_4x_nof3546, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    annot_twist_his(twist_his, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    print()
    print('#### store')
    print()
    print(''.join(store), end='')
    print()
    regs = [22, 6, 19, 5, 18, 21, 17, 16, 7, 1]
    print(f'cut (* {cut_id} *)')
    for i, reg in enumerate(regs):
        delim = ' /\\' if i != 9 else ''
        print(f'    {memory_arr(0x7fffffd9c0 + 288 * i + 144 * k0 + 16 * j, 8, 2)} = %v{reg}{delim}')
    print('  &&')
    for i, reg in enumerate(regs):
        delim = ' /\\' if i != 9 else ';'
        print(f'    {memory_arr(0x7fffffd9c0 + 288 * i + 144 * k0 + 16 * j, 8, 2)} = %v{reg}{delim}')
    cut_id += 1

def annot_jgt2_k0_iter(k0_iter, j, k0, prologue_cut_id, j_iter_prologue_cut_id):
    global cut_id

    load_end = find_first_line(k0_iter, 'PC = 0x5555550b6c')
    ntt10_4x_nof35467_end = find_first_line(k0_iter, 'PC = 0x5555550c6c', load_end)
    twist_his_end = find_first_line(k0_iter, 'PC = 0x5555550b10', ntt10_4x_nof35467_end)

    load = k0_iter[:load_end]
    ntt10_4x_nof35467 = k0_iter[load_end : ntt10_4x_nof35467_end]
    twist_his = k0_iter[ntt10_4x_nof35467_end : twist_his_end]
    store = k0_iter[twist_his_end:]

    print()
    print('### k0_iter')
    print()

    print()
    print('#### load')
    print()
    print(''.join(load), end='')
    print()
    print(f'ghost %fd0_{j}{k0}@sint16[8], %fd1_{j}{k0}@sint16[8], %fd2_{j}{k0}@sint16[8], %fd8_{j}{k0}@sint16[8], %fd9_{j}{k0}@sint16[8] :')
    print(f'    %fd0_{j}{k0} = %v2  /\\')
    print(f'    %fd1_{j}{k0} = %v16 /\\')
    print(f'    %fd2_{j}{k0} = %v3  /\\')
    print(f'    %fd8_{j}{k0} = %v6  /\\')
    print(f'    %fd9_{j}{k0} = %v18')
    print(f'  &&')
    print(f'    %fd0_{j}{k0} = %v2  /\\')
    print(f'    %fd1_{j}{k0} = %v16 /\\')
    print(f'    %fd2_{j}{k0} = %v3  /\\')
    print(f'    %fd8_{j}{k0} = %v6  /\\')
    print(f'    %fd9_{j}{k0} = %v18;')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %fd0_{j}{k0} = %v2  /\\')
    print(f'    %fd1_{j}{k0} = %v16 /\\')
    print(f'    %fd2_{j}{k0} = %v3  /\\')
    print(f'    %fd8_{j}{k0} = %v6  /\\')
    print(f'    %fd9_{j}{k0} = %v18 /\\')
    print()
    if k0 == 0:
        print(f'    %fd0_{j}{k0} = %fd0_{j}[:8] /\\')
        print(f'    %fd1_{j}{k0} = %fd1_{j}[:8] /\\')
        print(f'    %fd2_{j}{k0} = %fd2_{j}[:8] /\\')
        print(f'    %fd8_{j}{k0} = %fd8_{j}[:8] /\\')
        print(f'    %fd9_{j}{k0} = %fd9_{j}[:8]')
    else:
        print(f'    %fd0_{j}{k0} = %fd0_{j}[8:] /\\')
        print(f'    %fd1_{j}{k0} = %fd1_{j}[8:] /\\')
        print(f'    %fd2_{j}{k0} = %fd2_{j}[8:] /\\')
        print(f'    %fd8_{j}{k0} = %fd8_{j}[8:] /\\')
        print(f'    %fd9_{j}{k0} = %fd9_{j}[8:]')
    print()
    print(f'    prove with [cuts[{j_iter_prologue_cut_id}]]')
    print(f'  &&')
    print(f'    %fd0_{j}{k0} = %v2  /\\')
    print(f'    %fd1_{j}{k0} = %v16 /\\')
    print(f'    %fd2_{j}{k0} = %v3  /\\')
    print(f'    %fd8_{j}{k0} = %v6  /\\')
    print(f'    %fd9_{j}{k0} = %v18 /\\')
    print()
    if k0 == 0:
        print(f'    %fd0_{j}{k0} = %fd0_{j}[:8] /\\')
        print(f'    %fd1_{j}{k0} = %fd1_{j}[:8] /\\')
        print(f'    %fd2_{j}{k0} = %fd2_{j}[:8] /\\')
        print(f'    %fd8_{j}{k0} = %fd8_{j}[:8] /\\')
        print(f'    %fd9_{j}{k0} = %fd9_{j}[:8]')
    else:
        print(f'    %fd0_{j}{k0} = %fd0_{j}[8:] /\\')
        print(f'    %fd1_{j}{k0} = %fd1_{j}[8:] /\\')
        print(f'    %fd2_{j}{k0} = %fd2_{j}[8:] /\\')
        print(f'    %fd8_{j}{k0} = %fd8_{j}[8:] /\\')
        print(f'    %fd9_{j}{k0} = %fd9_{j}[8:]')
    print()
    print(f'    prove with [cuts[{j_iter_prologue_cut_id}]];')
    print()
    k0_iter_load_cut_id = cut_id
    cut_id += 1

    annot_ntt10_4x_nof35467(ntt10_4x_nof35467, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    annot_jgt2_twist_his(twist_his, j, k0, prologue_cut_id, j_iter_prologue_cut_id, k0_iter_load_cut_id)

    print()
    print('#### store')
    print()
    print(''.join(store), end='')
    print()
    regs = [24, 5, 20, 1, 19, 23, 17, 16, 7, 3]
    print(f'cut (* {cut_id} *)')
    for i, reg in enumerate(regs):
        delim = ' /\\' if i != 9 else ''
        print(f'    {memory_arr(0x7fffffd9c0 + 288 * i + 144 * k0 + 16 * j, 8, 2)} = %v{reg}{delim}')
    print('  &&')
    for i, reg in enumerate(regs):
        delim = ' /\\' if i != 9 else ';'
        print(f'    {memory_arr(0x7fffffd9c0 + 288 * i + 144 * k0 + 16 * j, 8, 2)} = %v{reg}{delim}')
    cut_id += 1


def annot_j_iter(j_iter, j, prologue_cut_id):
    global cut_id

    if j_iter[2].find('PC = 0x5555550804') != -1:
        k0_loop_begin = find_first_line(j_iter, 'PC = 0x5555550900') + 2
        k0_loop_end = find_first_line(j_iter, 'PC = 0x5555550d18', k0_loop_begin)

        k0_iter_ends = []
        k0_iter_end = k0_loop_begin
        while True:
            k0_iter_end = find_first_line(j_iter, 'PC = 0x555555094c', k0_iter_end)
            if k0_iter_end == -1:
                break
            k0_iter_end += 2
            k0_iter_ends.append(k0_iter_end)
        assert(k0_iter_ends[-1] == k0_loop_end)

        prologue = j_iter[:k0_loop_begin]
        epilogue = j_iter[k0_loop_end:]

        print()
        print('## j_iter')
        print()

        print()
        print('### j_iter prologue')
        print()
        print(''.join(prologue), end='')
        print()
        print(f'ghost %fa0_{j}@sint16[16], %fa1_{j}@sint16[16], %fa2_{j}@sint16[16], %fa7_{j}@sint16[16], %fa8_{j}@sint16[16], %fa9_{j}@sint16[16] :')
        print(f'    %fa0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fa1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fa2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fa7_{j} = {memory_arr(0x7fffffc250, 16, 2)} /\\')
        print(f'    %fa8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fa9_{j} = {memory_arr(0x7fffffc290, 16, 2)}')
        print(f'  &&')
        print(f'    %fa0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fa1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fa2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fa7_{j} = {memory_arr(0x7fffffc250, 16, 2)} /\\')
        print(f'    %fa8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fa9_{j} = {memory_arr(0x7fffffc290, 16, 2)};')
        print()
        print(f'cut (* {cut_id} *)')
        print(f'    %fa0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fa1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fa2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fa7_{j} = {memory_arr(0x7fffffc250, 16, 2)} /\\')
        print(f'    %fa8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fa9_{j} = {memory_arr(0x7fffffc290, 16, 2)} /\\')
        print()
        print(f'    %fa0_{j} = {format_poly(288 + 16 * j, 16)} /\\')
        print(f'    %fa1_{j} = {format_poly(144 + 16 * j, 16)} /\\')
        print(f'    %fa2_{j} = {format_poly(  0 + 16 * j, 16)} /\\')
        print(f'    %fa7_{j} = {format_poly(720 + 16 * j, 16)} /\\')
        print(f'    %fa8_{j} = {format_poly(576 + 16 * j, 16)} /\\')
        print(f'    %fa9_{j} = {format_poly(432 + 16 * j, 16)}')
        print()
        print(f'    prove with [cuts[{prologue_cut_id}]]')
        print(f'  &&')
        print(f'    %fa0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fa1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fa2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fa7_{j} = {memory_arr(0x7fffffc250, 16, 2)} /\\')
        print(f'    %fa8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fa9_{j} = {memory_arr(0x7fffffc290, 16, 2)} /\\')
        print()
        print(f'    %fa0_{j} = {format_poly(288 + 16 * j, 16)} /\\')
        print(f'    %fa1_{j} = {format_poly(144 + 16 * j, 16)} /\\')
        print(f'    %fa2_{j} = {format_poly(  0 + 16 * j, 16)} /\\')
        print(f'    %fa7_{j} = {format_poly(720 + 16 * j, 16)} /\\')
        print(f'    %fa8_{j} = {format_poly(576 + 16 * j, 16)} /\\')
        print(f'    %fa9_{j} = {format_poly(432 + 16 * j, 16)}')
        print()
        print(f'    prove with [cuts[{prologue_cut_id}]];')
        print()
        j_iter_prologue_cut_id = cut_id
        cut_id += 1

        k0 = 0
        k0_iter_begin = k0_loop_begin
        for k0_iter_end in k0_iter_ends:
            annot_jle2_k0_iter(j_iter[k0_iter_begin : k0_iter_end], j, k0, prologue_cut_id, j_iter_prologue_cut_id)
            k0_iter_begin = k0_iter_end
            k0 += 1

        print()
        print('### j_iter epilogue')
        print()
        print(''.join(epilogue), end='')
        print()
    else:
        assert(j_iter[2].find('PC = 0x5555550d44') != -1)

        k0_loop_begin = find_first_line(j_iter, 'PC = 0x5555550e14') + 2
        k0_loop_end = find_first_line(j_iter, 'PC = 0x5555550d18', k0_loop_begin)

        k0_iter_ends = []
        k0_iter_end = k0_loop_begin
        while True:
            k0_iter_end = find_first_line(j_iter, 'PC = 0x5555550b54', k0_iter_end)
            if k0_iter_end == -1:
                break
            k0_iter_end += 2
            k0_iter_ends.append(k0_iter_end)
        assert(k0_iter_ends[-1] == k0_loop_end)

        prologue = j_iter[:k0_loop_begin]
        epilogue = j_iter[k0_loop_end:]

        print()
        print('## j_iter')
        print()

        print()
        print('### j_iter prologue')
        print()
        print(''.join(prologue), end='')
        print()
        print(f'ghost %fd0_{j}@sint16[16], %fd1_{j}@sint16[16], %fd2_{j}@sint16[16], %fd8_{j}@sint16[16], %fd9_{j}@sint16[16] :')
        print(f'    %fd0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fd1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fd2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fd8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fd9_{j} = {memory_arr(0x7fffffc290, 16, 2)}')
        print(f'  &&')
        print(f'    %fd0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fd1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fd2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fd8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fd9_{j} = {memory_arr(0x7fffffc290, 16, 2)};')
        print()
        print(f'cut (* {cut_id} *)')
        print(f'    %fd0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fd1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fd2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fd8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fd9_{j} = {memory_arr(0x7fffffc290, 16, 2)} /\\')
        print()
        print(f'    %fd0_{j} = {format_poly(288 + 16 * j, 16)} /\\')
        print(f'    %fd1_{j} = {format_poly(144 + 16 * j, 16)} /\\')
        print(f'    %fd2_{j} = {format_poly(  0 + 16 * j, 16)} /\\')
        print(f'    %fd8_{j} = {format_poly(576 + 16 * j, 16)} /\\')
        print(f'    %fd9_{j} = {format_poly(432 + 16 * j, 16)}')
        print()
        print(f'    prove with [cuts[{prologue_cut_id}]]')
        print(f'  &&')
        print(f'    %fd0_{j} = {memory_arr(0x7fffffc2b0, 16, 2)} /\\')
        print(f'    %fd1_{j} = {memory_arr(0x7fffffc2d0, 16, 2)} /\\')
        print(f'    %fd2_{j} = {memory_arr(0x7fffffc2f0, 16, 2)} /\\')
        print(f'    %fd8_{j} = {memory_arr(0x7fffffc270, 16, 2)} /\\')
        print(f'    %fd9_{j} = {memory_arr(0x7fffffc290, 16, 2)} /\\')
        print()
        print(f'    %fd0_{j} = {format_poly(288 + 16 * j, 16)} /\\')
        print(f'    %fd1_{j} = {format_poly(144 + 16 * j, 16)} /\\')
        print(f'    %fd2_{j} = {format_poly(  0 + 16 * j, 16)} /\\')
        print(f'    %fd8_{j} = {format_poly(576 + 16 * j, 16)} /\\')
        print(f'    %fd9_{j} = {format_poly(432 + 16 * j, 16)}')
        print()
        print(f'    prove with [cuts[{prologue_cut_id}]];')
        print()
        j_iter_prologue_cut_id = cut_id
        cut_id += 1

        k0 = 0
        k0_iter_begin = k0_loop_begin
        for k0_iter_end in k0_iter_ends:
            annot_jgt2_k0_iter(j_iter[k0_iter_begin : k0_iter_end], j, k0, prologue_cut_id, j_iter_prologue_cut_id)
            k0_iter_begin = k0_iter_end
            k0 += 1

        print()
        print('### j_iter epilogue')
        print()
        print(''.join(epilogue), end='')
        print()

def annot(lines):
    global cut_id

    j_loop_begin = find_first_line(lines, 'PC = 0x55555507dc') + 2
    j_loop_end = find_first_line(lines, 'SP = 0x7fffffc310', j_loop_begin)

    j_iter_ends = []
    j_iter_end = j_loop_begin
    while True:
        j_iter_end = find_first_line(lines, 'PC = 0x5555550d18', j_iter_end)
        if j_iter_end == -1:
            break
        j_iter_end += 2
        j_iter_ends.append(j_iter_end)
    assert(j_iter_ends[-1] == j_loop_end)

    prologue = lines[:j_loop_begin]
    epilogue = lines[j_loop_end:]

    print('proc main(')
    print('    # input')
    for i in range(0, 768, 16):
        arr = [f'sint16 poly{i + j},' for j in range(16)]
        arr = [f'{s:15}' for s in arr]
        print(f'    {" ".join(arr).strip()}')
    print()
    print('    # ghost')
    print('    sint16 Q, sint16 Q2, sint16 NQ2, sint16 W10')
    print(') =')
    print('{')
    print('    Q = 4591 /\\ Q2 = 2295 /\\ NQ2 = -2295 /\\')
    print('    W10 = -1610 /\\')
    print()
    for i in range(0, 768, 16):
        print(f'    {format_poly(i, 16)} <= {format_arr(["Q2"] * 16)} /\\')
    print()
    for i in range(0, 768, 16):
        print(f'    {format_poly(i, 16)} >= {format_arr(["NQ2"] * 16)} /\\')
    print('    true')
    print('  &&')
    print('    Q = 4591@16 /\\ Q2 = 2295@16 /\\ NQ2 = (-2295)@16 /\\')
    print('    W10 = (-1610)@16 /\\')
    print()
    for i in range(0, 768, 16):
        print(f'    {format_poly(i, 16)} <=s {format_arr(["Q2"] * 16)} /\\')
    print()
    for i in range(0, 768, 16):
        print(f'    {format_poly(i, 16)} >=s {format_arr(["NQ2"] * 16)} /\\')
    print('    true')
    print('}')

    print()
    print('# constants')
    print()
    consts = [4591, 29, 7, 0, 0, 0, 0, 0, 1005, 918, -818, -1736, 7173, 6552, -5838, -12391]
    rhs = [format_imm(c) for c in consts]
    print(f'mov {memory_arr(0x55555526d0, 16, 2)} {format_arr(rhs)};')
    print()
    for j in range(9):
        twist_consts = twist_table[j]
        rhs = [format_imm(c) for c in twist_consts]
        print(f'mov {memory_arr(0x55555526f0 + 32 * j, 16, 2)} {format_arr(rhs)};')
    print()

    print()
    print('# inputs')
    print()
    for i in range(0, 768, 16):
        print(f'mov {memory_arr(0x5555570c38 + 2 * i, 16, 2)} {format_poly(i, 16)};')
    print()

    print()
    # FIXME: add predicates about twist_consts
    print('# prologue')
    print()
    print(''.join(prologue), end='')
    print()
    print(f'cut (* {cut_id} *)')
    print(f'    %v0 = {format_arr([str(c) for c in consts[:8]])} /\\')
    print(f'    %v4 = {format_arr([str(c) for c in consts[8:]])} /\\')
    print()
    for i in range(0, 768, 16):
        end = ' /\\\n' if i != 768 - 16 else '\n'
        print(f'    {memory_arr(0x5555570c38 + 2 * i, 16, 2)} = {format_poly(i, 16)}', end=end)
    print(f'  &&')
    print(f'    %v0 = {format_arr([format_const(c) for c in consts[:8]])} /\\')
    print(f'    %v4 = {format_arr([format_const(c) for c in consts[8:]])} /\\')
    print()
    for i in range(0, 768, 16):
        end = ' /\\\n' if i != 768 - 16 else ';\n'
        print(f'    {memory_arr(0x5555570c38 + 2 * i, 16, 2)} = {format_poly(i, 16)}', end=end)
    print()
    prologue_cut_id = cut_id
    cut_id += 1

    j = 0
    j_iter_begin = j_loop_begin
    for j_iter_end in j_iter_ends:
        annot_j_iter(lines[j_iter_begin : j_iter_end], j, prologue_cut_id)
        j_iter_begin = j_iter_end
        j += 1
        # if j == 4:
        #     break

    print()
    print('# epilogue')
    print()
    print(''.join(epilogue), end='')
    print()

    print('{ true && true }')

with open('./all_neon_raw.cl', 'r') as f:
    lines = f.readlines()
    annot(lines)
