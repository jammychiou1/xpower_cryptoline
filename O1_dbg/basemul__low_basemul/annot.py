def find_first_line(lines, pattern, begin=0):
    for now in range(begin, len(lines)):
        if lines[now].find(pattern) != -1:
            return now
    return -1

def format_imm(val):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += '@sint16'
    return s

def format_const(val, width=16):
    s = str(val)
    if val < 0:
        s = f'({s})'
    s += f'@{width}'
    return s

def format_arr(arr):
    inner = ', '.join(arr)
    return f'[{inner}]'

def format_coefs(coefs):
    return format_arr([str(c) for c in coefs])

def format_poly(base, cnt):
    arr = '['
    for i in range(cnt):
        if i != cnt - 1:
            s = f'poly{base + i},'
            s = f'{s:9}'
        else:
            s = f'poly{base + i}'
            s = f'{s:7}'
        arr += s
    arr += ']'
    return arr

def memory_loc(addr):
    return f'L{hex(addr)}'

def memory_arr(base, len, size):
    return format_arr([memory_loc(base + size * i) for i in range(len)])

# TODO: dump low const table
consts_table = [
    [1,      7,      -478,   -3412,  -478,   -3412,  4591,   15631],
    [-1610,  -11491, 1175,   8386,   0,      0,      4591,   15631],
    [1610,   11491,  -129,   -921,   1708,   12191,  4591,   15631],
    [2274,   16231,  2190,   15631,  0,      0,      4591,   15631],
    [-1815,  -12954, -6,     -43,    -129,   -921,   4591,   15631],
    [-1,     -7,     956,    6823,   0,      0,      4591,   15631],
    [-2274,  -16231, 1708,   12191,  -1095,  -7815,  4591,   15631],
    [1815,   12954,  258,    1841,   0,      0,      4591,   15631],
    [-2113,  -15081, -1095,  -7815,  -6,     -43,    4591,   15631],
    [2113,   15081,  12,     86,     0,      0,      4591,   15631],
]
cut_id = 0

def weight_prefix(i):
    if i == 0:
        return ''
    # TODO: i == 1
    return f'W10 ** {i} * '

def annot_radix2_twist(conv, i, prologue_cut_id, load_cut_id):
    global cut_id

    seg0_end = find_first_line(conv, 'PC = 0x5555551d5c')
    seg1_end = find_first_line(conv, 'PC = 0x5555551d6c', seg0_end)
    seg2_end = find_first_line(conv, 'PC = 0x5555551d78', seg1_end)
    seg3_end = find_first_line(conv, 'PC = 0x5555551d84', seg2_end)
    seg4_end = find_first_line(conv, 'PC = 0x5555551d94', seg3_end)
    seg5_end = find_first_line(conv, 'PC = 0x5555551da0', seg4_end)
    seg6_end = find_first_line(conv, 'PC = 0x5555551dac', seg5_end)
    seg7_end = find_first_line(conv, 'PC = 0x5555551db0', seg6_end)
    seg8_end = find_first_line(conv, 'PC = 0x5555551e68', seg7_end)
    seg9_end = find_first_line(conv, 'PC = 0x5555551e78', seg8_end)
    seg10_end = find_first_line(conv, 'PC = 0x5555551e80', seg9_end)
    seg11_end = find_first_line(conv, 'PC = 0x5555551e90', seg10_end)
    seg12_end = find_first_line(conv, 'PC = 0x5555551e9c', seg11_end)
    seg13_end = find_first_line(conv, 'PC = 0x5555551ea4', seg12_end)
    seg14_end = find_first_line(conv, 'PC = 0x5555551eb4', seg13_end)
    seg15_end = find_first_line(conv, 'PC = 0x5555551ec0', seg14_end)

    seg0 = conv[:seg0_end]
    seg1 = conv[seg0_end : seg1_end]
    seg2 = conv[seg1_end : seg2_end]
    seg3 = conv[seg2_end : seg3_end]
    seg4 = conv[seg3_end : seg4_end]
    seg5 = conv[seg4_end : seg5_end]
    seg6 = conv[seg5_end : seg6_end]
    seg7 = conv[seg6_end : seg7_end]
    seg8 = conv[seg7_end : seg8_end]
    seg9 = conv[seg8_end : seg9_end]
    seg10 = conv[seg9_end : seg10_end]
    seg11 = conv[seg10_end : seg11_end]
    seg12 = conv[seg11_end : seg12_end]
    seg13 = conv[seg12_end : seg13_end]
    seg14 = conv[seg13_end : seg14_end]
    seg15 = conv[seg14_end : seg15_end]
    seg16 = conv[seg15_end:]

    print()
    print('### radix2_twist')
    print()

    print(''.join(seg0), end='')
    print(f'''
assert
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v4 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v4
    && true;

assert
    %v4 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v4 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v4 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v4 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v4 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v4 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];
''')

    print(''.join(seg1), end='')
    print(f'''
assert
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v17 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v17
    && true;

assert
    %v17 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v17 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v17 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v17 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v17 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v17 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];
''')

    print(''.join(seg2), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v1 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v1
    && true;

assert
    %v1 <= [4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000] /\\
    %v1 >= [-4000, -4000, -4000, -4000, -4000, -4000, -4000, -4000]
    prove with [precondition, cuts[{prologue_cut_id}], algebra solver isl]
    && true;

assume
    %v1 <= [4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000] /\\
    %v1 >= [-4000, -4000, -4000, -4000, -4000, -4000, -4000, -4000]
  &&
    %v1 <=s [4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16] /\\
    %v1 >=s [(-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16];
''')

    print(''.join(seg3), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v18 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v18
    && true;

assert
    %v18 <= [4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000] /\\
    %v18 >= [-4000, -4000, -4000, -4000, -4000, -4000, -4000, -4000]
    prove with [precondition, cuts[{prologue_cut_id}], algebra solver isl]
    && true;

assume
    %v18 <= [4000, 4000, 4000, 4000, 4000, 4000, 4000, 4000] /\\
    %v18 >= [-4000, -4000, -4000, -4000, -4000, -4000, -4000, -4000]
  &&
    %v18 <=s [4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16, 4000@16] /\\
    %v18 >=s [(-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16, (-4000)@16];
''')

    print(''.join(seg4), end='')
    print(f'''
ghost %fc0_{i}@sint16[8], %fc1_{i}@sint16[8], %fd0_{i}@sint16[8], %fd1_{i}@sint16[8] :
    %fc0_{i} = %v2 /\\ %fc1_{i} = %v1 /\\ %fd0_{i} = %v7 /\\ %fd1_{i} = %v18
  &&
    %fc0_{i} = %v2 /\\ %fc1_{i} = %v1 /\\ %fd0_{i} = %v7 /\\ %fd1_{i} = %v18;
''')

    print(''.join(seg5), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %fd0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %fd0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %fd0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %fd0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v3
    && true;

assert
    %v3 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v3 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
    prove with [precondition, cuts[{prologue_cut_id}], algebra solver isl]
    && true;

assume
    %v3 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v3 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
  &&
    %v3 <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %v3 >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16];
''')

    print(''.join(seg6), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %fd1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %fd1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %fd1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v6 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %fd1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v6
    && true;

assert
    %v6 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v6 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
    prove with [precondition, cuts[{prologue_cut_id}], algebra solver isl]
    && true;

assume
    %v6 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v6 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
  &&
    %v6 <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %v6 >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16];
''')

    print(''.join(seg7), end='')
    print(f'''
ghost %gd0_{i}@sint16[8], %gd1_{i}@sint16[8] :
    %gd0_{i} = %v3 /\\ %gd1_{i} = %v6
  &&
    %gd0_{i} = %v3 /\\ %gd1_{i} = %v6;

cut (* {cut_id} *)
    %fc0_{i} = %v2 /\\ %fc1_{i} = %v1 /\\ %fd0_{i} = %v7 /\\ %fd1_{i} = %v18 /\\ %gd0_{i} = %v3 /\\ %gd1_{i} = %v6 /\\

    %fc0_{i} = %fa0_{i} + {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
        ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\
    %fc1_{i} = %fa0_{i} - {format_coefs([consts_table[i][0]] * 8)} * %fa1_{i}
        ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %fd0_{i} = %fb0_{i} + {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
        ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\
    %fd1_{i} = %fb0_{i} - {format_coefs([consts_table[i][0]] * 8)} * %fb1_{i}
        ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %gd0_{i} =  {format_coefs([consts_table[i][0]] * 8)} * %fd0_{i} ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\
    %gd1_{i} = -{format_coefs([consts_table[i][0]] * 8)} * %fd1_{i} ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    true
  &&
    %fc0_{i} = %v2 /\\ %fc1_{i} = %v1 /\\ %fd0_{i} = %v7 /\\ %fd1_{i} = %v18 /\\ %gd0_{i} = %v3 /\\ %gd1_{i} = %v6 /\\

    %fc0_{i} <=s [8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16] /\\
    %fc0_{i} >=s [(-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16] /\\

    %fc1_{i} <=s [8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16] /\\
    %fc1_{i} >=s [(-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16] /\\

    %fd0_{i} <=s [8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16] /\\
    %fd0_{i} >=s [(-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16] /\\

    %fd1_{i} <=s [8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16, 8100@16] /\\
    %fd1_{i} >=s [(-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16, (-8100)@16] /\\

    %gd0_{i} <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %gd0_{i} >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16] /\\

    %gd1_{i} <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %gd1_{i} >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16] /\\

    true
    prove with [precondition, cuts[{prologue_cut_id}]];
''')
    cut_id += 1

    print(''.join(seg8), end='')
    print(f'''
cut (* {cut_id} *)
    %v0[0] = (
        %fc0_{i}[0] * %fd0_{i}[0] +
        %fc0_{i}[1] * %gd0_{i}[7] +
        %fc0_{i}[2] * %gd0_{i}[6] +
        %fc0_{i}[3] * %gd0_{i}[5] +
        %fc0_{i}[4] * %gd0_{i}[4] +
        %fc0_{i}[5] * %gd0_{i}[3] +
        %fc0_{i}[6] * %gd0_{i}[2] +
        %fc0_{i}[7] * %gd0_{i}[1]
    ) /\\

    %v0[1] = (
        %fc0_{i}[0] * %fd0_{i}[1] +
        %fc0_{i}[1] * %fd0_{i}[0] +
        %fc0_{i}[2] * %gd0_{i}[7] +
        %fc0_{i}[3] * %gd0_{i}[6] +
        %fc0_{i}[4] * %gd0_{i}[5] +
        %fc0_{i}[5] * %gd0_{i}[4] +
        %fc0_{i}[6] * %gd0_{i}[3] +
        %fc0_{i}[7] * %gd0_{i}[2]
    ) /\\

    %v0[2] = (
        %fc0_{i}[0] * %fd0_{i}[2] +
        %fc0_{i}[1] * %fd0_{i}[1] +
        %fc0_{i}[2] * %fd0_{i}[0] +
        %fc0_{i}[3] * %gd0_{i}[7] +
        %fc0_{i}[4] * %gd0_{i}[6] +
        %fc0_{i}[5] * %gd0_{i}[5] +
        %fc0_{i}[6] * %gd0_{i}[4] +
        %fc0_{i}[7] * %gd0_{i}[3]
    ) /\\

    %v0[3] = (
        %fc0_{i}[0] * %fd0_{i}[3] +
        %fc0_{i}[1] * %fd0_{i}[2] +
        %fc0_{i}[2] * %fd0_{i}[1] +
        %fc0_{i}[3] * %fd0_{i}[0] +
        %fc0_{i}[4] * %gd0_{i}[7] +
        %fc0_{i}[5] * %gd0_{i}[6] +
        %fc0_{i}[6] * %gd0_{i}[5] +
        %fc0_{i}[7] * %gd0_{i}[4]
    ) /\\

    %v4[0] = (
        %fc0_{i}[0] * %fd0_{i}[4] +
        %fc0_{i}[1] * %fd0_{i}[3] +
        %fc0_{i}[2] * %fd0_{i}[2] +
        %fc0_{i}[3] * %fd0_{i}[1] +
        %fc0_{i}[4] * %fd0_{i}[0] +
        %fc0_{i}[5] * %gd0_{i}[7] +
        %fc0_{i}[6] * %gd0_{i}[6] +
        %fc0_{i}[7] * %gd0_{i}[5]
    ) /\\

    %v4[1] = (
        %fc0_{i}[0] * %fd0_{i}[5] +
        %fc0_{i}[1] * %fd0_{i}[4] +
        %fc0_{i}[2] * %fd0_{i}[3] +
        %fc0_{i}[3] * %fd0_{i}[2] +
        %fc0_{i}[4] * %fd0_{i}[1] +
        %fc0_{i}[5] * %fd0_{i}[0] +
        %fc0_{i}[6] * %gd0_{i}[7] +
        %fc0_{i}[7] * %gd0_{i}[6]
    ) /\\

    %v4[2] = (
        %fc0_{i}[0] * %fd0_{i}[6] +
        %fc0_{i}[1] * %fd0_{i}[5] +
        %fc0_{i}[2] * %fd0_{i}[4] +
        %fc0_{i}[3] * %fd0_{i}[3] +
        %fc0_{i}[4] * %fd0_{i}[2] +
        %fc0_{i}[5] * %fd0_{i}[1] +
        %fc0_{i}[6] * %fd0_{i}[0] +
        %fc0_{i}[7] * %gd0_{i}[7]
    ) /\\

    %v4[3] = (
        %fc0_{i}[0] * %fd0_{i}[7] +
        %fc0_{i}[1] * %fd0_{i}[6] +
        %fc0_{i}[2] * %fd0_{i}[5] +
        %fc0_{i}[3] * %fd0_{i}[4] +
        %fc0_{i}[4] * %fd0_{i}[3] +
        %fc0_{i}[5] * %fd0_{i}[2] +
        %fc0_{i}[6] * %fd0_{i}[1] +
        %fc0_{i}[7] * %fd0_{i}[0]
    ) /\\

    %v3[0] = (
        %fc1_{i}[0] * %fd1_{i}[0] +
        %fc1_{i}[1] * %gd1_{i}[7] +
        %fc1_{i}[2] * %gd1_{i}[6] +
        %fc1_{i}[3] * %gd1_{i}[5] +
        %fc1_{i}[4] * %gd1_{i}[4] +
        %fc1_{i}[5] * %gd1_{i}[3] +
        %fc1_{i}[6] * %gd1_{i}[2] +
        %fc1_{i}[7] * %gd1_{i}[1]
    ) /\\

    %v3[1] = (
        %fc1_{i}[0] * %fd1_{i}[1] +
        %fc1_{i}[1] * %fd1_{i}[0] +
        %fc1_{i}[2] * %gd1_{i}[7] +
        %fc1_{i}[3] * %gd1_{i}[6] +
        %fc1_{i}[4] * %gd1_{i}[5] +
        %fc1_{i}[5] * %gd1_{i}[4] +
        %fc1_{i}[6] * %gd1_{i}[3] +
        %fc1_{i}[7] * %gd1_{i}[2]
    ) /\\

    %v3[2] = (
        %fc1_{i}[0] * %fd1_{i}[2] +
        %fc1_{i}[1] * %fd1_{i}[1] +
        %fc1_{i}[2] * %fd1_{i}[0] +
        %fc1_{i}[3] * %gd1_{i}[7] +
        %fc1_{i}[4] * %gd1_{i}[6] +
        %fc1_{i}[5] * %gd1_{i}[5] +
        %fc1_{i}[6] * %gd1_{i}[4] +
        %fc1_{i}[7] * %gd1_{i}[3]
    ) /\\

    %v3[3] = (
        %fc1_{i}[0] * %fd1_{i}[3] +
        %fc1_{i}[1] * %fd1_{i}[2] +
        %fc1_{i}[2] * %fd1_{i}[1] +
        %fc1_{i}[3] * %fd1_{i}[0] +
        %fc1_{i}[4] * %gd1_{i}[7] +
        %fc1_{i}[5] * %gd1_{i}[6] +
        %fc1_{i}[6] * %gd1_{i}[5] +
        %fc1_{i}[7] * %gd1_{i}[4]
    ) /\\

    %v2[0] = (
        %fc1_{i}[0] * %fd1_{i}[4] +
        %fc1_{i}[1] * %fd1_{i}[3] +
        %fc1_{i}[2] * %fd1_{i}[2] +
        %fc1_{i}[3] * %fd1_{i}[1] +
        %fc1_{i}[4] * %fd1_{i}[0] +
        %fc1_{i}[5] * %gd1_{i}[7] +
        %fc1_{i}[6] * %gd1_{i}[6] +
        %fc1_{i}[7] * %gd1_{i}[5]
    ) /\\

    %v2[1] = (
        %fc1_{i}[0] * %fd1_{i}[5] +
        %fc1_{i}[1] * %fd1_{i}[4] +
        %fc1_{i}[2] * %fd1_{i}[3] +
        %fc1_{i}[3] * %fd1_{i}[2] +
        %fc1_{i}[4] * %fd1_{i}[1] +
        %fc1_{i}[5] * %fd1_{i}[0] +
        %fc1_{i}[6] * %gd1_{i}[7] +
        %fc1_{i}[7] * %gd1_{i}[6]
    ) /\\

    %v2[2] = (
        %fc1_{i}[0] * %fd1_{i}[6] +
        %fc1_{i}[1] * %fd1_{i}[5] +
        %fc1_{i}[2] * %fd1_{i}[4] +
        %fc1_{i}[3] * %fd1_{i}[3] +
        %fc1_{i}[4] * %fd1_{i}[2] +
        %fc1_{i}[5] * %fd1_{i}[1] +
        %fc1_{i}[6] * %fd1_{i}[0] +
        %fc1_{i}[7] * %gd1_{i}[7]
    ) /\\

    %v2[3] = (
        %fc1_{i}[0] * %fd1_{i}[7] +
        %fc1_{i}[1] * %fd1_{i}[6] +
        %fc1_{i}[2] * %fd1_{i}[5] +
        %fc1_{i}[3] * %fd1_{i}[4] +
        %fc1_{i}[4] * %fd1_{i}[3] +
        %fc1_{i}[5] * %fd1_{i}[2] +
        %fc1_{i}[6] * %fd1_{i}[1] +
        %fc1_{i}[7] * %fd1_{i}[0]
    ) /\\

    true
    prove with [cuts[{prologue_cut_id}]]
  &&
    %v0 <=s [524880000@32, 524880000@32, 524880000@32, 524880000@32] /\\
    %v0 >=s [(-524880000)@32, (-524880000)@32, (-524880000)@32, (-524880000)@32] /\\

    %v4 <=s [524880000@32, 524880000@32, 524880000@32, 524880000@32] /\\
    %v4 >=s [(-524880000)@32, (-524880000)@32, (-524880000)@32, (-524880000)@32] /\\

    %v3 <=s [524880000@32, 524880000@32, 524880000@32, 524880000@32] /\\
    %v3 >=s [(-524880000)@32, (-524880000)@32, (-524880000)@32, (-524880000)@32] /\\

    %v2 <=s [524880000@32, 524880000@32, 524880000@32, 524880000@32] /\\
    %v2 >=s [(-524880000)@32, (-524880000)@32, (-524880000)@32, (-524880000)@32] /\\

    true
    prove with [cuts[{prologue_cut_id}]];
''')
    cut_id += 1

    print(''.join(seg9), end='')
    print(f'''
ghost %h0_0_{i}@sint32[4], %h0_1_{i}@sint32[4], %h1_0_{i}@sint32[4], %h1_1_{i}@sint32[4] :
    %h0_0_{i} = %v1 /\\ %h0_1_{i} = %v6 /\\
    %h1_0_{i} = %v0 /\\ %h1_1_{i} = %v4
  &&
    %h0_0_{i} = %v1 /\\ %h0_1_{i} = %v6 /\\
    %h1_0_{i} = %v0 /\\ %h1_1_{i} = %v4;
''')

    print(''.join(seg10), end='')
    print(f'''
ghost %m0_{i}@sint16[8] : %m0_{i} = %v2 && %m0_{i} = %v2;
''')

    print(''.join(seg11), end='')
    print(f'''
ghost %hh0_{i}@sint16[8] : %hh0_{i} = %v1 && %hh0_{i} = %v1;

assert
    %h0_0_{i} - [4591, 4591, 4591, 4591] * %m0_{i}[:4]
    = [65536, 65536, 65536, 65536] * %hh0_{i}[:4] /\\

    %h0_1_{i} - [4591, 4591, 4591, 4591] * %m0_{i}[4:]
    = [65536, 65536, 65536, 65536] * %hh0_{i}[4:]

    prove with [algebra solver isl]
    && true;

assume
    %h0_0_{i} - [4591, 4591, 4591, 4591] * %m0_{i}[:4]
    = [65536, 65536, 65536, 65536] * %hh0_{i}[:4] /\\

    %h0_1_{i} - [4591, 4591, 4591, 4591] * %m0_{i}[4:]
    = [65536, 65536, 65536, 65536] * %hh0_{i}[4:]
    && true;
''')

    print(''.join(seg12), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][2]] * 8)} * %hh0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v1
    prove with [algebra solver isl]
    && true;

assume
    {format_coefs([consts_table[i][2]] * 8)} * %hh0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v1
    && true;
''')

    print(''.join(seg13), end='')
    print(f'''
ghost %m1_{i}@sint16[8] : %m1_{i} = %v2 && %m1_{i} = %v2;
''')

    print(''.join(seg14), end='')
    print(f'''
ghost %hh1_{i}@sint16[8] : %hh1_{i} = %v0 && %hh1_{i} = %v0;

assert
    %h1_0_{i} - [4591, 4591, 4591, 4591] * %m1_{i}[:4]
    = [65536, 65536, 65536, 65536] * %hh1_{i}[:4] /\\

    %h1_1_{i} - [4591, 4591, 4591, 4591] * %m1_{i}[4:]
    = [65536, 65536, 65536, 65536] * %hh1_{i}[4:]

    prove with [algebra solver isl]
    && true;

assume
    %h1_0_{i} - [4591, 4591, 4591, 4591] * %m1_{i}[:4]
    = [65536, 65536, 65536, 65536] * %hh1_{i}[:4] /\\

    %h1_1_{i} - [4591, 4591, 4591, 4591] * %m1_{i}[4:]
    = [65536, 65536, 65536, 65536] * %hh1_{i}[4:]
    && true;
''')

    print(''.join(seg15), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][4]] * 8)} * %hh1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v0
    prove with [algebra solver isl]
    && true;

assume
    {format_coefs([consts_table[i][4]] * 8)} * %hh1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v2
    = %v0
    && true;
''')

    print(''.join(seg16), end='')
    print()
    print(f'cut (* {cut_id} *)')
    prefix = weight_prefix(i)
    padding = ' ' * len(prefix)
    for k in range(16):
        reg = '%v1' if k < 8 else '%v0'
        print(f'    {reg}[{k % 8}] = 72 * W10 ** {i} * (')
        for ka in range(16):
            wrap = ka > k
            kb = (k - ka) % 16
            factor_a = f'arr{i}{ka // 8}{ka % 8}_a'
            factor_b = f'arr{i}{kb // 8}{kb % 8}_b'
            if not wrap:
                print(f'        {padding}{factor_a} * {factor_b}', end=' +\n' if ka != 15 else '\n')
            else:
                print(f'        {prefix}{factor_a} * {factor_b}', end=' +\n' if ka != 15 else '\n')
        print(f'    ) ( mod [4591] ) /\\')
        print()
    print(f'''
    true
    prove with [precondition, cuts[{cut_id - 3}, {cut_id - 2}, {cut_id - 1}]] # TODO
  &&
    true
    prove with [cuts[{prologue_cut_id}]];
''')
    cut_id += 1

def annot_karatsuba_twist(conv, i, prologue_cut_id, load_cut_id):
    global cut_id

    seg0_end = find_first_line(conv, 'PC = 0x5555551b58')
    seg1_end = find_first_line(conv, 'PC = 0x5555551b68', seg0_end)
    seg2_end = find_first_line(conv, 'PC = 0x5555551b78', seg1_end)
    seg3_end = find_first_line(conv, 'PC = 0x5555551b88', seg2_end)
    seg4_end = find_first_line(conv, 'PC = 0x5555551b98', seg3_end)
    seg5_end = find_first_line(conv, 'PC = 0x5555551ba4', seg4_end)

    seg0 = conv[:seg0_end]
    seg1 = conv[seg0_end : seg1_end]
    seg2 = conv[seg1_end : seg2_end]
    seg3 = conv[seg2_end : seg3_end]
    seg4 = conv[seg3_end : seg4_end]
    seg5 = conv[seg4_end : seg5_end]
    seg6 = conv[seg5_end:]

    print()
    print('### karatsuba_twist')
    print()

    print(''.join(seg0), end='')
    print(f'''
assert
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v4 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fa0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v4
    && true;

assert
    %v4 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v4 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v4 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v4 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v4 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v4 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];
''')

    print(''.join(seg1), end='')
    print(f'''
assert
    %fa1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fa1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fa1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v1 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fa1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v1
    && true;

assert
    %v1 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v1 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v1 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v1 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v1 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v1 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];
''')

    print(''.join(seg2), end='')
    print(f'''
assert
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v17 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fb0_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v17
    && true;

assert
    %v17 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v17 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v17 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v17 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v17 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v17 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];
''')

    print(''.join(seg3), end='')
    print(f'''
assert
    %fb1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    %fb1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    %fb1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v18 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    %fb1_{i} - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v18
    && true;

assert
    %v18 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v18 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
    prove with [algebra solver isl]
    && true;

assume
    %v18 <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %v18 >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096]
  &&
    %v18 <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %v18 >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16];

ghost %ffa0_{i}@sint16[8], %ffa1_{i}@sint16[8], %ffb0_{i}@sint16[8], %ffb1_{i}@sint16[8] :
    %ffa0_{i} = %v4 /\\ %ffa1_{i} = %v1 /\\ %ffb0_{i} = %v17 /\\ %ffb1_{i} = %v18
  &&
    %ffa0_{i} = %v4 /\\ %ffa1_{i} = %v1 /\\ %ffb0_{i} = %v17 /\\ %ffb1_{i} = %v18;
''')

    print(''.join(seg4), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %ffb0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %ffb0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %ffb0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v7 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %ffb0_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v7
    && true;

assert
    %v7 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v7 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
    prove with [precondition, cuts[0], algebra solver isl]
    && true;

assume
    %v7 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v7 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
  &&
    %v7 <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %v7 >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16];
''')

    print(''.join(seg5), end='')
    print(f'''
assert
    {format_coefs([consts_table[i][0]] * 8)} * %ffb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    <= [32767, 32767, 32767, 32767, 32767, 32767, 32767, 32767] /\\

    {format_coefs([consts_table[i][0]] * 8)} * %ffb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    >= [-32768, -32768, -32768, -32768, -32768, -32768, -32768, -32768]

    prove with [algebra solver isl]
    && true;

assert
    {format_coefs([consts_table[i][0]] * 8)} * %ffb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v3 ( mod [65536, 65536, 65536, 65536, 65536, 65536, 65536, 65536] )
    && true;

assume
    {format_coefs([consts_table[i][0]] * 8)} * %ffb1_{i}
    - [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] * %v0
    = %v3
    && true;

assert
    %v3 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v3 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
    prove with [precondition, cuts[0], algebra solver isl]
    && true;

assume
    %v3 <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %v3 >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000]
  &&
    %v3 <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %v3 >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16];
''')

    print(f'''
ghost %gb0_{i}@sint16[8], %gb1_{i}@sint16[8] :
    %gb0_{i} = %v7 /\\ %gb1_{i} = %v3
  &&
    %gb0_{i} = %v7 /\\ %gb1_{i} = %v3;

cut (* {cut_id} *)
    %ffa0_{i} = %v4 /\\ %ffa1_{i} = %v1 /\\ %ffb0_{i} = %v17 /\\ %ffb1_{i} = %v18 /\\
    %gb0_{i} = %v7 /\\ %gb1_{i} = %v3 /\\

    %ffa0_{i} <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %ffa0_{i} >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096] /\\

    %ffa1_{i} <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %ffa1_{i} >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096] /\\

    %ffb0_{i} <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %ffb0_{i} >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096] /\\

    %ffb1_{i} <= [4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096] /\\
    %ffb1_{i} >= [-4096, -4096, -4096, -4096, -4096, -4096, -4096, -4096] /\\

    %gb0_{i} <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %gb0_{i} >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000] /\\

    %gb1_{i} <= [3000, 3000, 3000, 3000, 3000, 3000, 3000, 3000] /\\
    %gb1_{i} >= [-3000, -3000, -3000, -3000, -3000, -3000, -3000, -3000] /\\

    true
    prove with [precondition, cuts[{prologue_cut_id}, {cut_id - 1}], algebra solver isl],

    %gb0_{i} = {format_coefs([consts_table[i][0]] * 8)} * %ffb0_{i}
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] ) /\\

    %gb1_{i} = {format_coefs([consts_table[i][0]] * 8)} * %ffb1_{i}
    ( mod [4591, 4591, 4591, 4591, 4591, 4591, 4591, 4591] )
  &&
    %ffa0_{i} = %v4 /\\ %ffa1_{i} = %v1 /\\ %ffb0_{i} = %v17 /\\ %ffb1_{i} = %v18 /\\
    %gb0_{i} = %v7 /\\ %gb1_{i} = %v3 /\\

    %ffa0_{i} <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %ffa0_{i} >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16] /\\

    %ffa1_{i} <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %ffa1_{i} >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16] /\\

    %ffb0_{i} <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %ffb0_{i} >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16] /\\

    %ffb1_{i} <=s [4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16, 4096@16] /\\
    %ffb1_{i} >=s [(-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16, (-4096)@16] /\\

    %gb0_{i} <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %gb0_{i} >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16] /\\

    %gb1_{i} <=s [3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16, 3000@16] /\\
    %gb1_{i} >=s [(-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16, (-3000)@16] /\\

    true
    prove with [precondition, cuts[{prologue_cut_id}]];
''')
    cut_id += 1

    print(''.join(seg6), end='')
    print(f'''
cut (* {cut_id} *)
    true && true;
''')
    cut_id += 1

def annot_i_iter(i_iter, i, prologue_cut_id):
    global cut_id

    load_end = find_first_line(i_iter, 'PC = 0x5555551d40') + 2
    store_begin = find_first_line(i_iter, 'PC = 0x5555551d18', load_end)

    load = i_iter[:load_end]
    conv = i_iter[load_end : store_begin]
    store = i_iter[store_begin:]

    print()
    print('## i_iter')
    print()

    print()
    print('### load')
    print()
    print(''.join(load), end='')
    print(f'''
ghost %fa0_{i}@sint16[8], %fa1_{i}@sint16[8], %fb0_{i}@sint16[8], %fb1_{i}@sint16[8] :
    %fa0_{i} = %v4 /\\ %fa1_{i} = %v1 /\\ %fb0_{i} = %v17 /\\ %fb1_{i} = %v18
  &&
    %fa0_{i} = %v4 /\\ %fa1_{i} = %v1 /\\ %fb0_{i} = %v17 /\\ %fb1_{i} = %v18;\
''')
    print(f'''
cut (* {cut_id} *)
    %fa0_{i} = %v4 /\\ %fa1_{i} = %v1 /\\ %fb0_{i} = %v17 /\\ %fb1_{i} = %v18 /\\

    %fa0_{i} = {format_arr([f'arr{i}0{k}_a' for k in range(8)])} /\\
    %fa1_{i} = {format_arr([f'arr{i}1{k}_a' for k in range(8)])} /\\
    %fb0_{i} = {format_arr([f'arr{i}0{k}_b' for k in range(8)])} /\\
    %fb1_{i} = {format_arr([f'arr{i}1{k}_b' for k in range(8)])}

    prove with [cuts[{prologue_cut_id}]]
  &&
    %fa0_{i} = %v4 /\\ %fa1_{i} = %v1 /\\ %fb0_{i} = %v17 /\\ %fb1_{i} = %v18 /\\

    %fa0_{i} = {format_arr([f'arr{i}0{k}_a' for k in range(8)])} /\\
    %fa1_{i} = {format_arr([f'arr{i}1{k}_a' for k in range(8)])} /\\
    %fb0_{i} = {format_arr([f'arr{i}0{k}_b' for k in range(8)])} /\\
    %fb1_{i} = {format_arr([f'arr{i}1{k}_b' for k in range(8)])}

    prove with [cuts[{prologue_cut_id}]];
''')
    load_cut_id = cut_id
    cut_id += 1

    if i % 2 == 0:
        annot_radix2_twist(conv, i, prologue_cut_id, load_cut_id)
    else:
        annot_karatsuba_twist(conv, i, prologue_cut_id, load_cut_id)

    print()
    print('##### store')
    print()
    print(''.join(store), end='')
    print(f'''
cut (* {cut_id} *)
    true && true;
''')
    cut_id += 1

def annot(lines):
    global cut_id

    i_loop_begin = find_first_line(lines, 'PC = 0x5555551b40') + 2
    i_loop_end = find_first_line(lines, 'SP = 0x7fffffe100', i_loop_begin)

    i_iter_ends = []
    i_iter_end = i_loop_begin
    while True:
        i_iter_end = find_first_line(lines, 'PC = 0x5555551d30', i_iter_end)
        if i_iter_end == -1:
            break
        i_iter_end += 2
        i_iter_ends.append(i_iter_end)
    assert(i_iter_ends[-1] == i_loop_end)

    prologue = lines[:i_loop_begin]
    epilogue = lines[i_loop_end:]

    print('proc main(')
    print('    # array')
    for i in range(10):
        for k0 in range(2):
            arr = [f'sint16 arr{i}{k0}{k}_a,' for k in range(8)]
            print(f'    {" ".join(arr)}')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'sint16 arr{i}{k0}{k}_b,' for k in range(8)]
            print(f'    {" ".join(arr)}')
    print()
    print('    # ghost')
    print('    sint16 Q, sint16 Q2, sint16 NQ2, sint16 W10, sint16 W9')
    print(') =')
    print('{')
    print('    Q = 4591 /\\ Q2 = 2295 /\\ NQ2 = -2295 /\\')
    print('    W10 = -1610 /\\ W9 = -1606 /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'    {format_arr(arr)} <= {format_arr(["21565"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'    {format_arr(arr)} >= {format_arr(["-21565"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'    {format_arr(arr)} <= {format_arr(["21565"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'    {format_arr(arr)} >= {format_arr(["-21565"] * 8)} /\\')
    print()
    print('    true')
    print('  &&')
    print('    Q = 4591@16 /\\ Q2 = 2295@16 /\\ NQ2 = (-2295)@16 /\\')
    print('    W10 = (-1610)@16 /\\ W9 = (-1606)@16 /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'    {format_arr(arr)} <=s {format_arr(["21565@16"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'    {format_arr(arr)} >=s {format_arr(["(-21565)@16"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'    {format_arr(arr)} <=s {format_arr(["21565@16"] * 8)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'    {format_arr(arr)} >=s {format_arr(["(-21565)@16"] * 8)} /\\')
    print()
    print('    true')
    print('}')

    print()
    print('# constants')
    print()
    for t in range(10):
        rhs = [format_imm(c) for c in consts_table[t]]
        print(f'mov {memory_arr(0x5555552de0 + 16 * t, 8, 2)} {format_arr(rhs)};')
    print()

    print()
    print('# setup')
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'mov {memory_arr(0x7fffffe3c0 + 16 * (k0 + 2 * i), 8, 2)} {format_arr(arr)};')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'mov {memory_arr(0x7fffffe280 + 16 * (k0 + 2 * i), 8, 2)} {format_arr(arr)};')
    print()

    print()
    print('# prologue')
    print()
    print(''.join(prologue), end='')
    print()
    print(f'cut (* {cut_id} *)')
    for i in range(10):
        for k0 in range(2):
                arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
                print(f'    {memory_arr(0x7fffffe3c0 + 16 * (k0 + 2 * i), 8, 2)} = {format_arr(arr)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
                arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
                print(f'    {memory_arr(0x7fffffe280 + 16 * (k0 + 2 * i), 8, 2)} = {format_arr(arr)} /\\')
    print()
    for t in range(10):
        print(f'    {memory_arr(0x5555552de0 + 16 * t, 8, 2)} = {format_coefs(consts_table[t])} /\\')
    print()
    print('    true')
    print('  &&')
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_a' for k in range(8)]
            print(f'    {memory_arr(0x7fffffe3c0 + 16 * (k0 + 2 * i), 8, 2)} = {format_arr(arr)} /\\')
    print()
    for i in range(10):
        for k0 in range(2):
            arr = [f'arr{i}{k0}{k}_b' for k in range(8)]
            print(f'    {memory_arr(0x7fffffe280 + 16 * (k0 + 2 * i), 8, 2)} = {format_arr(arr)} /\\')
    print()
    for t in range(10):
        print(f'    {memory_arr(0x5555552de0 + 16 * t, 8, 2)} = {format_arr([format_const(c) for c in consts_table[t]])} /\\')
    print()
    print('    true;')
    prologue_cut_id = cut_id
    cut_id += 1

    i = 0
    i_iter_begin = i_loop_begin
    for i_iter_end in i_iter_ends:
        annot_i_iter(lines[i_iter_begin : i_iter_end], i, prologue_cut_id)
        i_iter_begin = i_iter_end
        i += 1

    print()
    print('# epilogue')
    print()
    print(''.join(epilogue), end='')
    print()

    print('{ true && true }')

with open('./all_neon_raw.cl', 'r') as f:
    lines = f.readlines()
    annot(lines)

